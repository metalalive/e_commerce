name: media continuous integration
on:
  push:
    branches:
      - 'media-dev/**'
  pull_request:
    branches:
      - 'master'
    paths:
      - '.github/workflows/media-ci.yaml'
      - 'services/media/**'


env:
    LIBUV_INSTALL_PATH: ${{ github.workspace }}/installed/libuv
    BROTLI_INSTALL_PATH: ${{ github.workspace }}/installed/brotli
    H2O_INSTALL_PATH: ${{ github.workspace }}/installed/h2o
    JANSSON_INSTALL_PATH: ${{ github.workspace }}/installed/jansson
    P11KIT_INSTALL_PATH: ${{ github.workspace }}/installed/p11-kit
    NETTLE_INSTALL_PATH: ${{ github.workspace }}/installed/nettle
    GNUTLS_INSTALL_PATH: ${{ github.workspace }}/installed/gnutls
    RHONABWY_INSTALL_PATH: ${{ github.workspace }}/installed/rhonabwy

# due to this long-time unresolved issue, it is safe to put tasks into one
# big job running sequentially, and give up nicely running simulteneous jobs.
# https://github.com/actions/checkout/issues/19
jobs:
  init-env-then-tests:
    runs-on: ubuntu-24.04
    steps:
      - uses: actions/checkout@v4

      - name: build tools check
        run: |
            openssl version
            gcc --version
            cmake --version
            mkdir -p ${{ github.workspace }}/installed

      - name: restore libuv library from cache
        id:   cachelibuv
        uses: actions/cache/restore@v4
        with:
            path: ${{ env.LIBUV_INSTALL_PATH }}
            key: prebuilt-libuv

      - name: download libuv source
        if: steps.cachelibuv.outputs.cache-hit != 'true'
        uses: actions/checkout@v4
        with:
            repository: libuv/libuv
            ref: v1.42.1
            path: deps/libuv

      - name: build libuv from source
        if: steps.cachelibuv.outputs.cache-hit != 'true'
        working-directory: deps/libuv
        run: |
            mkdir -p ./build
            cd ./build
            cmake -DCMAKE_INSTALL_PREFIX=${{ env.LIBUV_INSTALL_PATH }}  .. -DBUILD_TESTING=OFF
            make
            rm -rf ${{ env.LIBUV_INSTALL_PATH }} && mkdir -p ${{ env.LIBUV_INSTALL_PATH }}
            make install

      - name: examine libuv build
        working-directory: ${{ env.LIBUV_INSTALL_PATH }}
        run: |
            ls -lt ./  ./lib

      - name: save libuv library to cache
        if: steps.cachelibuv.outputs.cache-hit != 'true'
        uses: actions/cache/save@v4
        with:
            path: ${{ env.LIBUV_INSTALL_PATH }}
            key: prebuilt-libuv


      - name: restore libh2o library from cache
        id:   cachelibh2o
        uses: actions/cache/restore@v4
        with:
            path: |
                ${{ env.BROTLI_INSTALL_PATH }}
                ${{ env.H2O_INSTALL_PATH }}
            key: prebuilt-h2o

      - name: download HTTP h2o source
        if: steps.cachelibh2o.outputs.cache-hit != 'true'
        uses: actions/checkout@v4
        with:
            repository: h2o/h2o
            # always clone from master branch, libh2o maintainers no longer use release tags / branches
            ref: 08f0fcad7f423df285c5b886e74b2e1efe0c38e0
            path: deps/h2o

      - name: build brotli from source as H2O dependency
        if: steps.cachelibh2o.outputs.cache-hit != 'true'
        working-directory: deps/h2o/deps/brotli
        run: |
            mkdir -p ./build && cd build
            cmake -DCMAKE_INSTALL_PREFIX=${{ env.BROTLI_INSTALL_PATH }} -DCMAKE_BUILD_TYPE=Release  ..
            rm -rf ${{ env.BROTLI_INSTALL_PATH }} && mkdir -p ${{ env.BROTLI_INSTALL_PATH }}
            cmake --build . --config Release --target install
            
      - name: examine brotli build
        working-directory: ${{ env.BROTLI_INSTALL_PATH }}
        run: |
            ls -lt ./  ./lib

      - name: build libh2o from source
        if: steps.cachelibh2o.outputs.cache-hit != 'true'
        working-directory: deps/h2o
        env:
            PKG_CONFIG_PATH: "${{ env.LIBUV_INSTALL_PATH }}/lib/pkgconfig:${{ env.BROTLI_INSTALL_PATH }}/lib/pkgconfig"
        run: |
            mkdir -p ./build && cd ./build
            cmake -DCMAKE_INSTALL_PREFIX=${{ env.H2O_INSTALL_PATH }}  -DBUILD_SHARED_LIBS=ON \
                -DCMAKE_BUILD_TYPE=Release -DWITH_MRUBY=OFF  -DWITH_FUSION=OFF  ..
            make libh2o
            rm -rf ${{ env.H2O_INSTALL_PATH }} && mkdir -p ${{ env.H2O_INSTALL_PATH }}
            make install
            make clean

      - name: examine h2o build
        working-directory: ${{ env.H2O_INSTALL_PATH }}
        run: |
            ls -lt ./  ./lib

      - name: save libh2o library to cache
        if: steps.cachelibh2o.outputs.cache-hit != 'true'
        uses: actions/cache/save@v4
        with:
            path: |
                ${{ env.BROTLI_INSTALL_PATH }}
                ${{ env.H2O_INSTALL_PATH }}
            key: prebuilt-h2o


      - name: restore jansson library from cache
        id:   cachejansson
        uses: actions/cache/restore@v4
        with:
            path: ${{ env.JANSSON_INSTALL_PATH }}
            key: prebuilt-jansson

      - name: download jansson source
        if: steps.cachejansson.outputs.cache-hit != 'true'
        uses: actions/checkout@v4
        with:
            repository: akheron/jansson
            ref: v2.14
            path: deps/jansson

      - name: build jansson from source
        if: steps.cachejansson.outputs.cache-hit != 'true'
        working-directory: deps/jansson
        run: |
            mkdir -p ./build  && cd ./build
            cmake -DCMAKE_INSTALL_PREFIX=${{ env.JANSSON_INSTALL_PATH }} \
                  -DJANSSON_BUILD_SHARED_LIBS=ON  ..
            make
            rm -rf ${{ env.JANSSON_INSTALL_PATH }} && mkdir -p ${{ env.JANSSON_INSTALL_PATH }}
            make install

      - name: examine jansson build
        working-directory: ${{ env.JANSSON_INSTALL_PATH }}
        run: |
            ls -lt ./  ./lib

      - name: save jansson library to cache
        if: steps.cachejansson.outputs.cache-hit != 'true'
        uses: actions/cache/save@v4
        with:
            path: ${{ env.JANSSON_INSTALL_PATH }}
            key: prebuilt-jansson


      - name: restore p11-kit library from cache
        id:   cachep11kit
        uses: actions/cache/restore@v4
        with:
            path: ${{ env.P11KIT_INSTALL_PATH }}
            key: prebuilt-p11-kit

      - name: download p11-kit source
        if: steps.cachep11kit.outputs.cache-hit != 'true'
        uses: actions/checkout@v4
        with:
            repository: p11-glue/p11-kit
            ref: 0.24.1 
            path: deps/p11-kit

      - name: build p11-kit from source
        if: steps.cachep11kit.outputs.cache-hit != 'true'
        working-directory: deps/p11-kit
        run: |
            mkdir -p ./_build
            python3 -m pip install meson ninja
            meson setup ./_build --prefix=${{ env.P11KIT_INSTALL_PATH }}
            meson compile -C ./_build
            #meson test    -C ./_build
            rm -rf ${{ env.P11KIT_INSTALL_PATH }} && mkdir -p ${{ env.P11KIT_INSTALL_PATH }}
            meson install -C ./_build

      - name: examine p11-kit build
        working-directory: ${{ env.P11KIT_INSTALL_PATH }}
        run: |
            ls -lt ./  ./lib  ./lib/x86_64-linux-gnu

      - name: save p11-kit library to cache
        if: steps.cachep11kit.outputs.cache-hit != 'true'
        uses: actions/cache/save@v4
        with:
            path: ${{ env.P11KIT_INSTALL_PATH }}
            key: prebuilt-p11-kit


      - name: restore GNU TLS library from cache
        id:   cachegnutls
        uses: actions/cache/restore@v4
        with:
            path: |
                ${{ env.NETTLE_INSTALL_PATH }}
                ${{ env.GNUTLS_INSTALL_PATH }}
            key: prebuilt-gnutls

      - name: download GNU TLS source
        if: steps.cachegnutls.outputs.cache-hit != 'true'
        uses: actions/checkout@v4
        with:
            repository: gnutls/gnutls
            ref: 3.7.11
            path: deps/gnutls
      
      - name: download GNUTLS / Nettle source
        if: steps.cachegnutls.outputs.cache-hit != 'true'
        uses: actions/checkout@v4
        with:
            repository: gnutls/nettle
            ref: nettle_3.7.2_release_20210321
            path: deps/gnutls/devel/nettle

      - name: build nettle from source as GnuTLS dependency
        if: steps.cachegnutls.outputs.cache-hit != 'true'
        working-directory: deps/gnutls/devel/nettle
        run: |
            ./.bootstrap
            ./configure --prefix=${{ env.NETTLE_INSTALL_PATH }} --disable-documentation --enable-mini-gmp
            make
            rm -rf ${{ env.NETTLE_INSTALL_PATH }} && mkdir -p ${{ env.NETTLE_INSTALL_PATH }}
            make install

      - name: examine nettle build
        working-directory: ${{ env.NETTLE_INSTALL_PATH }}
        # github action uses 64-bit CPU platform, the folder should be `lib64`
        run: |
            ls -lt ./  ./lib64

      - name: install dependencies for GNUTLS build
        if: steps.cachegnutls.outputs.cache-hit != 'true'
        run: |
            sudo apt-get update
            sudo apt-get install -y dash git-core autoconf libtool gettext autopoint
            sudo apt-get install -y automake python3  libp11-kit-dev libtspi-dev libunistring-dev
            sudo apt-get install -y libtasn1-bin libtasn1-6-dev libidn2-0-dev gawk gperf
            sudo apt-get install -y libtss2-dev libunbound-dev dns-root-data bison gtk-doc-tools
            sudo apt-get install -y texinfo texlive texlive-plain-generic texlive-extra-utils

      - name: build GNUTLS from source
        if: steps.cachegnutls.outputs.cache-hit != 'true'
        working-directory: deps/gnutls
        env:
            PKG_CONFIG_PATH: "${{ env.P11KIT_INSTALL_PATH }}/lib/x86_64-linux-gnu/pkgconfig:${{ env.NETTLE_INSTALL_PATH }}/lib64/pkgconfig"
            LD_LIBRARY_PATH: "$LD_LIBRARY_PATH:${{ env.NETTLE_INSTALL_PATH }}/lib64:${{ env.P11KIT_INSTALL_PATH }}/lib/x86_64-linux-gnu"
        run: |
            ./bootstrap
            ./configure  --prefix=${{ env.GNUTLS_INSTALL_PATH }}  --with-included-libtasn1 \
                --with-included-unistring  --disable-doc
            make 
            make check
            rm -rf ${{ env.GNUTLS_INSTALL_PATH }} && mkdir -p ${{ env.GNUTLS_INSTALL_PATH }}
            make install

      - name: examine GNUTLS build
        working-directory: ${{ env.GNUTLS_INSTALL_PATH }}
        run: |
            ls -lt ./  ./lib

      - name: save GNU TLS library to cache
        if: steps.cachegnutls.outputs.cache-hit != 'true'
        uses: actions/cache/save@v4
        with:
            path: |
                ${{ env.NETTLE_INSTALL_PATH }}
                ${{ env.GNUTLS_INSTALL_PATH }}
            key: prebuilt-gnutls


      - name: restore rhonabwy library from cache
        id:   cacherhonabwy
        uses: actions/cache/restore@v4
        with:
            path: ${{ env.RHONABWY_INSTALL_PATH }}
            key: prebuilt-rhonabwy

      - name: download rhonabwy source
        if: steps.cacherhonabwy.outputs.cache-hit != 'true'
        uses: actions/checkout@v4
        with:
            repository: babelouest/rhonabwy
            ref: v1.1.13
            path: deps/rhonabwy

      - name: build rhonabwy from source
        if: steps.cacherhonabwy.outputs.cache-hit != 'true'
        working-directory: deps/rhonabwy
        env:
            PKG_CONFIG_PATH: "${{ env.JANSSON_INSTALL_PATH }}/lib/pkgconfig:${{ env.GNUTLS_INSTALL_PATH }}/lib/pkgconfig:${{ env.P11KIT_INSTALL_PATH }}/lib/x86_64-linux-gnu/pkgconfig:${{ env.NETTLE_INSTALL_PATH }}/lib/pkgconfig"
            LD_LIBRARY_PATH: "$LD_LIBRARY_PATH:${{ env.JANSSON_INSTALL_PATH }}/lib:${{ env.GNUTLS_INSTALL_PATH }}/lib:${{ env.NETTLE_INSTALL_PATH }}/lib:${{ env.P11KIT_INSTALL_PATH }}/lib/x86_64-linux-gnu"
        run: |
            mkdir -p ./build && cd ./build
            cmake  -DWITH_JOURNALD=OFF  -DCMAKE_INSTALL_PREFIX=${{ env.RHONABWY_INSTALL_PATH }}  ..
            make
            rm -rf ${{ env.RHONABWY_INSTALL_PATH }} && mkdir -p ${{ env.RHONABWY_INSTALL_PATH }}
            make install

      - name: examine rhonabwy build
        working-directory: ${{ env.RHONABWY_INSTALL_PATH }}
        run: |
            ls -lt ./  ./lib

      - name: save rhonabwy library to cache
        if: steps.cacherhonabwy.outputs.cache-hit != 'true'
        uses: actions/cache/save@v4
        with:
            path: ${{ env.RHONABWY_INSTALL_PATH }}
            key: prebuilt-rhonabwy



        #working-directory: services/media
        #

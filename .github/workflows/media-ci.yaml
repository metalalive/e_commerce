name: media continuous integration
on:
  push:
    branches:
      - 'media-dev/**'
  pull_request:
    branches:
      - 'master'
    paths:
      - '.github/workflows/media-ci.yaml'
      - 'services/media/**'


env:
    LIBUV_INSTALL_PATH: ${{ github.workspace }}/installed/libuv
    BROTLI_INSTALL_PATH: ${{ github.workspace }}/installed/brotli
    H2O_INSTALL_PATH: ${{ github.workspace }}/installed/h2o
    JANSSON_INSTALL_PATH: ${{ github.workspace }}/installed/jansson
    RHONABWY_INSTALL_PATH: ${{ github.workspace }}/installed/rhonabwy
    MARIADBCLIENT_INSTALL_PATH: ${{ github.workspace }}/installed/mariadbclient

# due to this long-time unresolved issue, it is safe to put tasks into one
# big job running sequentially, and give up nicely running simulteneous jobs.
# https://github.com/actions/checkout/issues/19
jobs:
  init-env-then-tests:
    runs-on: ubuntu-24.04
    steps:
      - uses: actions/checkout@v4

      - name: build tools check
        run: |
            echo "LD_LIBRARY_PATH=$LD_LIBRARY_PATH"
            echo "LD_LIBRARY_PATH=${{ env.JANSSON_INSTALL_PATH }}/lib:${{ env.RHONABWY_INSTALL_PATH }}/lib:/usr/lib:/usr/libexec:/usr/local/lib" >> $GITHUB_ENV
            echo "LD_LIBRARY_PATH=$LD_LIBRARY_PATH"
            openssl version
            pkg-config --version
            cc --version
            gcc --version
            cmake --version
            
            mkdir -p ${{ github.workspace }}/installed

            sudo apt-get update
            sudo apt-get install -y  libcurl4-gnutls-dev


      - name: restore libuv library from cache
        id:   cachelibuv
        uses: actions/cache/restore@v4
        with:
            path: ${{ env.LIBUV_INSTALL_PATH }}
            key: prebuilt-libuv

      - name: download libuv source
        if: steps.cachelibuv.outputs.cache-hit != 'true'
        uses: actions/checkout@v4
        with:
            repository: libuv/libuv
            ref: v1.42.1
            path: deps/libuv

      - name: build libuv from source
        if: steps.cachelibuv.outputs.cache-hit != 'true'
        working-directory: deps/libuv
        run: |
            mkdir -p ./build
            cd ./build
            cmake -DCMAKE_INSTALL_PREFIX=${{ env.LIBUV_INSTALL_PATH }}  .. -DBUILD_TESTING=OFF
            make
            rm -rf ${{ env.LIBUV_INSTALL_PATH }} && mkdir -p ${{ env.LIBUV_INSTALL_PATH }}
            make install

      - name: examine libuv build
        working-directory: ${{ env.LIBUV_INSTALL_PATH }}
        run: |
            ls -lt ./  ./lib

      - name: save libuv library to cache
        if: steps.cachelibuv.outputs.cache-hit != 'true'
        uses: actions/cache/save@v4
        with:
            path: ${{ env.LIBUV_INSTALL_PATH }}
            key: prebuilt-libuv


      - name: restore libh2o library from cache
        id:   cachelibh2o
        uses: actions/cache/restore@v4
        with:
            path: |
                ${{ env.BROTLI_INSTALL_PATH }}
                ${{ env.H2O_INSTALL_PATH }}
            key: prebuilt-h2o

      - name: download HTTP h2o source
        if: steps.cachelibh2o.outputs.cache-hit != 'true'
        uses: actions/checkout@v4
        with:
            repository: h2o/h2o
            # always clone from master branch, libh2o maintainers no longer use release tags / branches
            ref: 08f0fcad7f423df285c5b886e74b2e1efe0c38e0
            path: deps/h2o

      - name: build brotli from source as H2O dependency
        if: steps.cachelibh2o.outputs.cache-hit != 'true'
        working-directory: deps/h2o/deps/brotli
        run: |
            mkdir -p ./build && cd build
            cmake -DCMAKE_INSTALL_PREFIX=${{ env.BROTLI_INSTALL_PATH }} -DCMAKE_BUILD_TYPE=Release  ..
            rm -rf ${{ env.BROTLI_INSTALL_PATH }} && mkdir -p ${{ env.BROTLI_INSTALL_PATH }}
            cmake --build . --config Release --target install
            
      - name: examine brotli build
        working-directory: ${{ env.BROTLI_INSTALL_PATH }}
        run: |
            ls -lt ./  ./lib

      - name: build libh2o from source
        if: steps.cachelibh2o.outputs.cache-hit != 'true'
        working-directory: deps/h2o
        env:
            PKG_CONFIG_PATH: "${{ env.LIBUV_INSTALL_PATH }}/lib/pkgconfig:${{ env.BROTLI_INSTALL_PATH }}/lib/pkgconfig"
        run: |
            mkdir -p ./build && cd ./build
            cmake -DCMAKE_INSTALL_PREFIX=${{ env.H2O_INSTALL_PATH }}  -DBUILD_SHARED_LIBS=ON \
                -DCMAKE_BUILD_TYPE=Release -DWITH_MRUBY=OFF  -DWITH_FUSION=OFF  ..
            make libh2o
            rm -rf ${{ env.H2O_INSTALL_PATH }} && mkdir -p ${{ env.H2O_INSTALL_PATH }}
            make install
            make clean

      - name: examine h2o build
        working-directory: ${{ env.H2O_INSTALL_PATH }}
        run: |
            ls -lt ./  ./lib

      - name: save libh2o library to cache
        if: steps.cachelibh2o.outputs.cache-hit != 'true'
        uses: actions/cache/save@v4
        with:
            path: |
                ${{ env.BROTLI_INSTALL_PATH }}
                ${{ env.H2O_INSTALL_PATH }}
            key: prebuilt-h2o


      - name: restore jansson library from cache
        id:   cachejansson
        uses: actions/cache/restore@v4
        with:
            path: ${{ env.JANSSON_INSTALL_PATH }}
            key: prebuilt-jansson

      - name: download jansson source
        if: steps.cachejansson.outputs.cache-hit != 'true'
        uses: actions/checkout@v4
        with:
            repository: akheron/jansson
            ref: v2.14
            path: deps/jansson

      - name: build jansson from source
        if: steps.cachejansson.outputs.cache-hit != 'true'
        working-directory: deps/jansson
        run: |
            mkdir -p ./build  && cd ./build
            cmake -DCMAKE_INSTALL_PREFIX=${{ env.JANSSON_INSTALL_PATH }} -DJANSSON_BUILD_DOCS=OFF \
                  -DJANSSON_BUILD_SHARED_LIBS=ON  ..
            make
            rm -rf ${{ env.JANSSON_INSTALL_PATH }} && mkdir -p ${{ env.JANSSON_INSTALL_PATH }}
            make install

      - name: examine jansson build
        working-directory: ${{ env.JANSSON_INSTALL_PATH }}
        run: |
            ls -lt ./  ./lib
            nm -D ${{ env.JANSSON_INSTALL_PATH }}/lib/libjansson.so | grep "json_delete"
            readelf -Ws ${{ env.JANSSON_INSTALL_PATH }}/lib/libjansson.so  | grep "json_delete"

      - name: save jansson library to cache
        if: steps.cachejansson.outputs.cache-hit != 'true'
        uses: actions/cache/save@v4
        with:
            path: ${{ env.JANSSON_INSTALL_PATH }}
            key: prebuilt-jansson


      - name: restore rhonabwy library from cache
        id:   cacherhonabwy
        uses: actions/cache/restore@v4
        with:
            path: ${{ env.RHONABWY_INSTALL_PATH }}
            key: prebuilt-rhonabwy-final

      - name: download rhonabwy source
        if: steps.cacherhonabwy.outputs.cache-hit != 'true'
        uses: actions/checkout@v4
        with:
            repository: babelouest/rhonabwy
            # (TODO)
            # consider this library is no longer maintained, I will upgrade
            # the library to this version then look for other substitutions
            ref: v1.1.9
            path: deps/rhonabwy

      - name: build rhonabwy from source
        if: steps.cacherhonabwy.outputs.cache-hit != 'true'
        working-directory: deps/rhonabwy
        env:
            PKG_CONFIG_PATH: "${{ env.JANSSON_INSTALL_PATH }}/lib/pkgconfig"
        run: |
            apt-cache show nettle-dev
            apt-cache show libgnutls28-dev
            sudo apt-get install -y  nettle-dev  libgnutls28-dev

            mkdir -p ./build && cd ./build
            cmake  -DWITH_JOURNALD=OFF  -DCMAKE_INSTALL_PREFIX=${{ env.RHONABWY_INSTALL_PATH }}  ..
            make
            echo "LD_LIBRARY_PATH=$LD_LIBRARY_PATH"
            rm -rf ${{ env.RHONABWY_INSTALL_PATH }} && mkdir -p ${{ env.RHONABWY_INSTALL_PATH }}
            make install

      - name: examine rhonabwy build
        working-directory: ${{ env.RHONABWY_INSTALL_PATH }}
        run: |
            ls -lt ./  ./lib
            echo "LD_LIBRARY_PATH=$LD_LIBRARY_PATH"

      - name: save rhonabwy library to cache
        if: steps.cacherhonabwy.outputs.cache-hit != 'true'
        uses: actions/cache/save@v4
        with:
            path: ${{ env.RHONABWY_INSTALL_PATH }}
            key: prebuilt-rhonabwy-final


      - name: download mariaDB connector/C source
        uses: actions/checkout@v4
        with:
            repository: mariadb-corporation/mariadb-connector-c
            ref: v3.1.7
            path: deps/mariadb-connector-c

      - name: build mariaDB connector/C  from source
        working-directory: deps/mariadb-connector-c
        run: |
            mkdir -p ./build && cd ./build
            echo "LD_LIBRARY_PATH=$LD_LIBRARY_PATH"

            cmake -DWITH_DYNCOL=OFF  -DCMAKE_BUILD_TYPE=Release  -DWITH_UNIT_TESTS=OFF \
                -DCMAKE_INSTALL_PREFIX=${{ env.MARIADBCLIENT_INSTALL_PATH }} ..
            make
            rm -rf ${{ env.MARIADBCLIENT_INSTALL_PATH }} && mkdir -p ${{ env.MARIADBCLIENT_INSTALL_PATH }}
            make install

      - name: examine mariaDB connector/C build
        working-directory: ${{ env.MARIADBCLIENT_INSTALL_PATH }}
        run: |
            ls -lt ./  ./lib



        #working-directory: services/media
        #

name: Order-Processing Continuous Integration

on:
  pull_request:
    branches: ["master"]
    paths:
      - '.github/workflows/orderproc-ci.yaml'
      - 'services/common/rust/**'
      - 'services/order/**'

env:
  CARGO_TERM_COLOR: always

jobs:
    lint-check:
      runs-on: ubuntu-24.04
      steps:
      - uses: actions/checkout@v4
      - name: downgrade rust toolchain to v1.86
        uses: ./.github/actions/rust-downgrade
        with:
          version-request: 1.86
      - name: lint check
        working-directory: services/order
        run: cargo clippy --features "mariadb amqprs"

    build-docker-image:
      if: startsWith(github.head_ref, 'order-mgt-dev/')
      needs: lint-check
      runs-on: ubuntu-24.04
      steps:
        - uses: actions/checkout@v4
        - name: Set up Docker Buildx
          uses: docker/setup-buildx-action@v3
        - name: Build Docker image for app and export to tar
          uses: docker/build-push-action@v5
          with:
            context: services
            file: services/order/infra/Dockerfile
            outputs: type=docker,dest=${{ runner.temp }}/ordermgt-backend-build0.tar
            tags: ordermgt-with-devtools:latest
            target: builder0
            push: false
            cache-from: type=gha
            cache-to: type=gha,mode=max
        - name: Upload artifact
          uses: actions/upload-artifact@v4
          with:
            name: ordermgt-docker-image
            path: ${{ runner.temp }}/ordermgt-backend-build0.tar
            retention-days: 1


    init-env-then-test:
      if: startsWith(github.head_ref, 'order-mgt-dev/')
      runs-on: ubuntu-24.04
      needs: build-docker-image
      steps:
      - uses: actions/checkout@v4 # checkout codebase from github
      - name: Build Docker image for database and export to tar
        uses: docker/build-push-action@v5
        with:
          context: infra
          file: infra/mariadb-ext.dockerfile
          outputs: type=docker
          tags: mariadb-ext:11-noble
          push: false
          cache-from: type=gha
          cache-to: type=gha,mode=max
      - name: Download docker image artifact
        uses: actions/download-artifact@v4
        with:
          name: ordermgt-docker-image
          path: ${{ runner.temp }}
      - name: Load docker image
        run: |
            docker load --input ${{ runner.temp }}/ordermgt-backend-build0.tar
            docker image list --all
      
      - name: set up database persistence path
        working-directory: ${{ github.workspace }}
        # the user `mariadb` in docker container has UID 999 and GID 999 
        run: |
          mkdir -p installed/mariadb/data  installed/mariadb/log
          sudo chown --recursive 999:999 installed/mariadb
      - name: Create test environment file
        working-directory: services/order/infra
        run: |
          echo "DB_HOST=ordermgt-test-mariadb" > ./container-test.env
          echo "MARIADB_ROOT_PASSWORD=DB_PASSWORD" >> ./container-test.env
          echo "SITEDBA_UNAME=DB_USERNAME"    >> ./container-test.env
          echo "SITEDBA_PASSWORD=DB_PASSWORD" >> ./container-test.env
          echo "DB_APP_UNAME=DB_USERNAME"    >> ./container-test.env
          echo "DB_APP_PASSWORD=DB_PASSWORD" >> ./container-test.env
          echo "CONTAINER_IP_RANGE=172.19.7.%" >> ./container-test.env
          echo "MIGRATE_VERSION_TAG=0.0.0" >> ./container-test.env
          echo "MARIADB_DATA_VOL=${{ github.workspace }}/installed/mariadb/data" > ./interpolation-test.env
          echo "MARIADB_LOG_VOL=${{ github.workspace }}/installed/mariadb/log" >> ./interpolation-test.env

      - name: set up credentials for test
        working-directory: services/common
        run: |
            python3 ./python/src/ecommerce_common/util/json_renderer.py \
                --template=./data/secrets_template.json   --output=./data/secrets.json \
                --parameters="backend_apps/secret_key/staff/OpenExchangeRates=${{ secrets.OpenExchangeRates }}"
            ls -lt ./data

      - name: run database test
        working-directory: services/order
        run: |
            docker compose --file ./infra/docker-compose-generic.yml --file ./infra/docker-compose-test.yml --env-file ./infra/interpolation-test.env  --profile cleandbschema  up --detach
            python3 ${{ github.workspace }}/.github/docker_wait.py  --container-name ordermgt-test-db-schema-downgrade  --target-status exited --timeout-secs 600
            docker ps --all --filter name=ordermgt-itest-0
            docker logs ordermgt-itest-0
            docker logs ordermgt-test-db-schema-upgrade --tail 30
            docker logs db-schema-migration-down-ordermgt --tail 30

      - name: Clean up containers database test
        if: always()
        working-directory: services/order
        run: |
            docker compose --file ./infra/docker-compose-generic.yml --file ./infra/docker-compose-test.yml --env-file ./infra/interpolation-test.env  --profile cleandbschema  down --volumes

      - name: run 3rd-party integration test
        working-directory: services/order
        run: |
            docker compose --file ./infra/docker-compose-test3pty.yml up
            docker ps --all --filter name=ordermgt-itest-currex-0
            docker logs ordermgt-itest-currex-0

      - name: Clean up containers 3rd-party test
        if: always()
        working-directory: services/order
        run: |
            docker compose --file ./infra/docker-compose-test3pty.yml down


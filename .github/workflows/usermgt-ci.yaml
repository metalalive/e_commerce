name: user-management continuous integration
on:
  pull_request:
    branches: ["master"]
    paths:
      - '.github/workflows/usermgt-ci.yaml'
      - 'services/common/python/**'
      - 'services/user_management/**'

# due to this long-time unresolved issue, it is safe to put tasks into one
# big job running sequentially, and give up nicely running simulteneous jobs.
# https://github.com/actions/checkout/issues/19
jobs:
    lint-check:
      if: startsWith(github.head_ref, 'usermgt-dev/')
      runs-on: ubuntu-24.04
      steps:
        - uses: actions/checkout@v4
        - name: Set up Python 3.13
          uses: actions/setup-python@v5
          with:
            python-version: '3.13.5'
        - name: Install ruff linter
          run: python3.13 -m pip install ruff==0.12.5
        - name: lint check
          working-directory: services/user_management
          run: |
              ruff check  ./src/ ./tests/  ./settings/

    build-docker-image:
      if: startsWith(github.head_ref, 'usermgt-dev/')
      needs: lint-check
      runs-on: ubuntu-24.04
      steps:
        - uses: actions/checkout@v4
        - name: Set up Docker Buildx
          uses: docker/setup-buildx-action@v3
        - name: Build Docker image and export to tar
          uses: docker/build-push-action@v5
          with:
            context: services
            file: services/user_management/infra/Dockerfile
            outputs: type=docker,dest=${{ runner.temp }}/usrmgt-backend-base.tar
            tags: usrmgt-backend-base:latest
            push: false
            cache-from: type=gha
            cache-to: type=gha,mode=max
        - name: Upload artifact
          uses: actions/upload-artifact@v4
          with:
            name: usrmgt-docker-image
            path: ${{ runner.temp }}/usrmgt-backend-base.tar
            retention-days: 1
    
    init-env-db-migration:
      if: startsWith(github.head_ref, 'usermgt-dev/')
      needs: build-docker-image
      runs-on: ubuntu-24.04
      steps:
        - uses: actions/checkout@v4
        - name: Build Docker image for database
          uses: docker/build-push-action@v5
          with:
            context: infra
            file: infra/mariadb-ext.dockerfile
            outputs: type=docker
            tags: mariadb-ext:11-noble
            push: false
        - name: Download docker image artifact
          uses: actions/download-artifact@v4
          with:
            name: usrmgt-docker-image
            path: ${{ runner.temp }}
        - name: Load docker image
          run: |
              docker load --input ${{ runner.temp }}/usrmgt-backend-base.tar
              docker image list
        - name: Create dev environment file
          working-directory: services/user_management/infra
          run: |
            sed \
              -e 's/your-domain-ip-or-container-name/usrmgt-dev-mariadb/' \
              -e 's|tmp/log/unknown|tmp/log/dev|' \
              -e "s/dbrootpswd/DB_PASSWORD/" \
              -e "s/your-site-dba/DB_USERNAME/" \
              -e "s/your-dba-pswd/DB_PASSWORD/" \
              -e "s/your-db4app/DB_USERNAME/" \
              -e "s/pswd-db-app/DB_PASSWORD/" \
              -e 's/local-ip-range/172.19.2.%/' \
              ./container-sample.env > ./container-dev.env

            echo "MARIADB_DATA_VOL=${{ github.workspace }}/installed/mariadb/data" > ./interpolation-dev.env
            echo "MARIADB_LOG_VOL=${{ github.workspace }}/installed/mariadb/log" >> ./interpolation-dev.env

        - name: set up credential for test
          working-directory: services/common/data
          shell: bash
          run: |
              ln -s ./secrets_template.json  ./secrets.json
        - name: Start services and run migration
          working-directory: services/user_management
          run: docker compose -f ./infra/docker-compose-generic.yml -f ./infra/docker-compose-dev.yml --env-file ./infra/interpolation-dev.env  --profile migrateonly up --abort-on-container-exit
        - name: Clean up containers and volumes
          if: always()
          working-directory: services/user_management
          run: docker compose -f ./infra/docker-compose-generic.yml -f ./infra/docker-compose-dev.yml --env-file ./infra/interpolation-dev.env  --profile migrateonly  down --volumes


    init-env-then-test:
      if: startsWith(github.head_ref, 'usermgt-dev/')
      runs-on: ubuntu-24.04
      needs: init-env-db-migration
      steps:
      - uses: actions/checkout@v4 # checkout codebase from github
      - name: Build Docker image for database
        uses: docker/build-push-action@v5
        with:
          context: infra
          file: infra/mariadb-ext.dockerfile
          outputs: type=docker
          tags: mariadb-ext:11-noble
          push: false
      - name: Download docker image artifact
        uses: actions/download-artifact@v4
        with:
          name: usrmgt-docker-image
          path: ${{ runner.temp }}
      - name: Load docker image
        run: |
            docker load --input ${{ runner.temp }}/usrmgt-backend-base.tar
            docker image list
      - name: Create dev environment file
        working-directory: services/user_management/infra
        run: |
          sed \
            -e 's/your-domain-ip-or-container-name/usrmgt-test-mariadb/' \
            -e 's|tmp/log/unknown|tmp/log/test|' \
            -e "s/dbrootpswd/DB_PASSWORD/" \
            -e "s/your-site-dba/DB_USERNAME/" \
            -e "s/your-dba-pswd/DB_PASSWORD/" \
            -e "s/your-db4app/DB_USERNAME/" \
            -e "s/pswd-db-app/DB_PASSWORD/" \
            -e 's/local-ip-range/172.19.1.%/' \
            ./container-sample.env > ./container-test.env

          echo "MARIADB_DATA_VOL=${{ github.workspace }}/installed/mariadb/data" > ./interpolation-test.env
          echo "MARIADB_LOG_VOL=${{ github.workspace }}/installed/mariadb/log" >> ./interpolation-test.env

      - name: set up credential for test
        working-directory: services/common/data
        shell: bash
        run: |
            ln -s ./secrets_template.json  ./secrets.json
      - name: run test
        working-directory: services/user_management
        run: |
            docker compose -f ./infra/docker-compose-generic.yml -f ./infra/docker-compose-test.yml --env-file ./infra/interpolation-test.env  up --detach
      - name: wait until test completed
        working-directory: .github
        run: |
            python3 ./docker_wait.py  --container-name usrmgt-backend-testapp-0  --target-status exited --timeout-secs 2400
            docker ps --all --filter name=usrmgt-*
            docker logs usrmgt-backend-testapp-0
        
      - name: Clean up containers and volumes
        if: always()
        working-directory: services/user_management
        run: docker compose -f ./infra/docker-compose-generic.yml -f ./infra/docker-compose-test.yml --env-file ./infra/interpolation-test.env  down --volumes


openapi: 3.0.3
info:
  title: Order Processing Service
  description: |-
    This is web API documentation of order processing server of my e-commerce project based on the OpenAPI 3.0 specification.
    termsOfService: http://swagger.io/terms/
  contact:
    email: xyz@my-orderproc-app.io
  license:
    name: MIT
    url: https://github.com/metalalive/e_commerce/blob/master/LICENSE
  version: 1.4.0

servers:
  - url: https://order-proc.site.not.ready/api/v1.4.0
tags:
  - name: cart
    description: shopping cart for user collecting items to checkout
  - name: order
    description: place a new order, or send return request

paths:
  /policy/products:
    post:
      summary: Edit policies for products
      description: Create / update policies for existing products during life cycle of an active order
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                type: object
                properties:
                  product_id:
                    $ref: '#/components/schemas/ProductId'
                  async_stock_chk:
                    type: boolean
                  auto_cancel_secs:
                    type: integer
                    format: uint32
                    example: 560
                  warranty_hours:
                    type: integer
                    format: uint32
                    example: 24000
                  max_num_rsv:
                    type: integer
                    format: uint16
                    example: 1059
                  min_num_rsv:
                    type: integer
                    format: uint16
                    example: 2
                required:
                  - product_id
                  - product_type
                  - async_stock_chk
                  - auto_cancel_secs
                  - warranty_hours
              minItems: 1
      responses:
        '200':
          description: Policies saved successfully
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    product_id:
                      $ref: '#/components/schemas/ProductId'
                    err_type:
                      type: string
                      enum:
                        - ProductNotExist
                        - EmptyInputData
                        - ExceedingMaxLimit
                    auto_cancel_secs:
                      $ref: '#/components/schemas/ProductPolicyClientLimitErr'
                    warranty_hours:
                      $ref: '#/components/schemas/ProductPolicyClientLimitErr'
                    num_rsv:
                      type: object
                      properties:
                        max_items:
                          type: integer
                          format: uint16
                          example: 257
                        min_items:
                          type: integer
                          format: uint16
                          example: 4
                  required:
                    - product_id
                    - product_type
                    - err_type
        
        '403':
          description: Permission denied or quota exceeded, 
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: '#/components/schemas/QuotaResourceError'
                  - $ref: '#/components/schemas/EmptyObject'
        '503':
          description: Service currently unavailable
      security:
        - BearerAuth: []
        
  /order:
    post:
      tags:
        - order
      summary: Place a new order
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrderRequestCreate'
      responses:
        '201':
          description: Order generated, with all chosen items reserved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderSuccessResponse'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderCreateErrorResponse'
        '429':
          description: Too many requests
        '503':
          description: Service unavailable
      security:
        - BearerAuth: []
  
  /order/{order-id}:
    get:
      summary: Get detail of an order
      description: Get some properties of an existing order.
      tags:
        - order
      parameters:
        - name: order-id
          in: path
          description: Identifier for the order
          required: true
          schema:
            type: string
        - name: shipping
          in: query
          description: 'load shipping detail'
          schema:
            type: boolean
        - name: billing
          in: query
          description: 'load billing detail'
          schema:
            type: boolean
        - name: lines
          in: query
          description: load order lines grouped by different states (pending, reserved, paid, shipping ...etc).
          schema:
            type: boolean
      responses:
        '200':
          description: the resulting data from successful read operation will vary based on specific query parameters you specified in the URL path
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderInfoRead'
        '404':
          description: Order not found
        '503':
          description: Service unavailable
      security:
        - BearerAuth: []
    patch:
      summary: Update detail of an order
      description: Update properties of an existing order, except chosen product items
      tags:
        - order
      parameters:
        - name: order-id
          in: path
          description: Identifier for the order
          required: true
          schema:
            type: string
        - name: shipping
          in: query
          description: 'enable update on shipping'
          schema:
            type: boolean
        - name: billing
          in: query
          description: 'enable update on billing'
          schema:
            type: boolean
      requestBody:
        required: true
        description: the properties to edit should correspond to specific query parameters you specified in the URL path
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrderRequestEdit'
      responses:
        '200':
          description: Successful update
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderEditErrorResponse'
        '503':
          description: Service unavailable
      security:
        - BearerAuth: []
  
  /order/{order-id}/return:
    post:
      summary: create return request for ordered lines
      description: create return request for ordered / reserved (might be paid) lines
      tags:
        - order
      parameters:
        - name: order-id
          in: path
          description: Identifier for the order
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              minItems: 1
              items:
                allOf:
                - $ref: '#/components/schemas/OrderLineObject'
      responses:
        '200':
          description: request accepted
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                type: array
                items:
                  allOf:
                  - $ref: '#/components/schemas/OrderLineReturnError'
        '403':
          description: Permission denied
        '503':
          description: Service unavailable
      security:
        - BearerAuth: []
  
  /cart/{seq-num}:
    get:
      summary: Get a specific cart
      description: Get one of user carts with a sequence number, note currently each cart is supposed to be exclusive to the owner.
      tags:
        - cart
      parameters:
        - name: seq-num
          in: path
          description: the sequence number starts from zero, maximum values depends on number of order lines the user can submit per cart / order.
          required: true
          schema:
            type: integer
            format: uint8
            example: 3
      responses:
        '200':
          description: return content of the cart
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CartTopLvl'
        '404':
          description: not found
        '500':
          description: internal error
    patch:
      summary: Update product lines in a specific cart
      description: insert new lines, or update existing lines to a specific cart
      tags:
        - cart
      parameters:
        - name: seq-num
          in: path
          required: true
          schema:
            type: integer
            format: uint8
            example: 2
      requestBody:
        description: content of the cart
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CartTopLvl'
      responses:
        '200':
          description: updated successfully
        '400':
          description: quota resource error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QuotaResourceError' 
        '404':
          description: not found
        '500':
          description: internal error
    delete:
      summary: discard / reset a specific cart
      description: discard / reset a specific cart
      tags:
        - cart
      parameters:
        - name: seq-num
          in: path
          required: true
          schema:
            type: integer
            format: uint8
            example: 1
      responses:
        '204':
          description: discarded successfully
        '410':
          description: gone
        '500':
          description: internal error
    

components:
  schemas:
    EmptyObject:
      type: object
      
    ProductId:
      type: integer
      format: uint64
      example: 10093183

    SellerId:
      type: integer
      format: uint32
      example: 18830

    CurrencyLabel:
      type: string
      enum: [INR, IDR, THB, TWD, USD]
      example: TWD
      
    QuotaResourceError:
      type: object
      properties:
        max_:
          type: integer
          format: uint32
          example: 599
        given:
          type: integer
          format: uint64
          example: 601
    
    ProductPolicyClientLimitErr:
      type: object
      description: present only when `err_type` is `ExceedingMaxLimit`
      properties:
        given:
          type: integer
          format: uint32
          example: 72001
        limit:
          type: integer
          format: uint32
          example: 72000
   
    CurrencySnapshot:
      type: object
      properties:
        name:
          $ref: '#/components/schemas/CurrencyLabel'
        rate:
          type: string
          example: '31.1449'

    OrderSellerCurrency:
      type: object
      properties:
        currency:
          $ref: '#/components/schemas/CurrencyLabel'
        seller_id:
          $ref: '#/components/schemas/SellerId'

    OrderCurrencySnapshot:
      type: object
      properties:
        snapshot:
          type: array
          items:
            anyOf:
            - $ref: '#/components/schemas/CurrencySnapshot'
        sellers:
          type: array
          items:
            anyOf:
            - $ref: '#/components/schemas/OrderSellerCurrency'
        buyer:
          $ref: '#/components/schemas/CurrencyLabel'
    
    OrderRequestCreate:
      type: object
      properties:
        order_lines:
          type: array
          minItems: 1
          uniqueItems: true
          items:
            $ref: '#/components/schemas/OrderLineObject'
        currency:
          $ref: '#/components/schemas/CurrencyLabel'
        shipping:
          $ref: '#/components/schemas/ShippingValid'
        billing:
          $ref: '#/components/schemas/BillingValid'
      required:
        - order_lines
        - shipping
        - billing
    
    OrderInfoRead:
      type: object
      properties:
        reserved_lines:
          type: array
          items:
            allOf:
            - $ref: '#/components/schemas/PayOrderLineObject'
        paid_lines:
          type: array
          items:
            allOf:
            - $ref: '#/components/schemas/PayOrderLineObject'
        shipping_lines:
          type: array
          items:
            oneOf:
            - $ref: '#/components/schemas/OrderLineObject'
        completed_lines:
          type: array
          items:
            allOf:
            - $ref: '#/components/schemas/OrderLineObject'
          minItems: 0
        shipping:
          allOf:
          - $ref: '#/components/schemas/ShippingValid'
          properties:
            shipments:
              type: array
              items:
                type: string
              description: list of shipment IDs associated with the order
              example: ['8x9e8r2tE', 'JiHuIIiKKUkm']
        billing:
          anyOf:
          - $ref: '#/components/schemas/BillingValid'
          properties:
            payments:
              type: array
              items:
                type: string
              description: list of payment IDs associated with the order
              example: ['9j8cj2r', '01k3kl1iK']
    
    OrderRequestEdit:
      type: object
      properties:
        shipping:
          $ref: '#/components/schemas/ShippingValid'
        billing:
          $ref: '#/components/schemas/BillingValid'

    BaseOrderLineObject:
      type: object
      properties:
        product_id:
          $ref: '#/components/schemas/ProductId'
        quantity:
          type: integer
          format: uint32
          example: 5

    PayAmountObject:
      type: object
      description: this object indicates the amount buyers are charged in thier currency.
      properties:
        unit:
          type: string
          example: '90.02918300'
        total:
          type: string
          description: in case the seller provides discount or couple in the future.
          example: '360.118005'

    PayOrderLineObject:
      allOf:
        - $ref: '#/components/schemas/BaseOrderLineObject'
      properties:
        seller_id:
          $ref: '#/components/schemas/SellerId'
          example: 986543
        amount:
          $ref: '#/components/schemas/PayAmountObject'
      required:
        - seller_id
        - product_type
        - product_id
        - quantity
        - amount

    OrderLineObject:
      allOf:
        - $ref: '#/components/schemas/BaseOrderLineObject'
      properties:
        seller_id:
          $ref: '#/components/schemas/SellerId'
      required:
        - seller_id
        - product_type
        - product_id
        - quantity
        
    OrderLineCreateError:
      type: object
      properties:
        seller_id:
          $ref: '#/components/schemas/SellerId'
        product_id:
          $ref: '#/components/schemas/ProductId'
        reason:
          type: string
          enum: [NotExist, OutOfStock, NotEnoughToClaim, RsvLimitViolation]
          example: OutOfStock
      required:
        - seller_id
        - product_type
        - product_id
        - reason
    
    OrderLineReturnError:
      type: object
      properties:
        seller_id:
          $ref: '#/components/schemas/SellerId'
        product_id:
          $ref: '#/components/schemas/ProductId'
        reason:
          type: string
          enum: [NotExist, WarrantyExpired, QtyLimitExceed, DuplicateReturn]
          example: WarrantyExpired
      required:
        - seller_id
        - product_type
        - product_id
        - reason
    
    BillingValid:
      type: object
      properties:
        address:
          $ref: '#/components/schemas/AddressValid'
        contact:
          $ref: '#/components/schemas/ContactValid'
      required:
        - contact
    BillingErrDetail:
      type: object
      properties:
        address:
          $ref: '#/components/schemas/AddressErrDetail'
        contact:
          $ref: '#/components/schemas/ContactErrDetail'
        nonfield:
          type: string
          enum: [contact-required]
    
    ShippingValid:
      type: object
      properties:
        address:
          $ref: '#/components/schemas/AddressValid'
        contact:
          $ref: '#/components/schemas/ContactValid'
        option:
          $ref: '#/components/schemas/ShippingOptionValid'
      required:
        - contact
        - option
    ShippingErrDetail:
      type: object
      properties:
        address:
          $ref: '#/components/schemas/AddressErrDetail'
        contact:
          $ref: '#/components/schemas/ContactErrDetail'
        option:
          $ref: '#/components/schemas/ShippingOptionErrDetail'
        non-field:
          type: string
          enum: [contact-required, option-required]
    
    AddressValid:
      type: object
      properties:
        country:
          type: string
          enum: [TW, IN, TH, ID, US]
        region:
          type: string
          example: Main island
        city:
          type: string
          example: New Taipei City
        distinct:
          type: string
          example: xyz678
        street_name:
          type: string
          example: QWETY st.
        detail:
          type: string
          example: 1-24-4 zabc building 2351
      required:
        - country
        - region
        - city
        - distinct
        - detail
    AddressErrDetail:
      type: object
      properties:
        country:
          type: string
          enum: [empty, invalid-char, not-exist, not-support]
          example: not-support
        region:
          type: string
          enum: [empty, invalid-char, not-exist, not-support]
          example: not-exist
        city:
          type: string
          enum: [empty, invalid-char, not-exist]
          example: invalid-char
        distinct:
          type: string
          enum: [empty, invalid-char]
        street_name:
          type: string
          enum: [empty, invalid-char]
        detail:
          type: string
          enum: [empty, invalid-char]
    
    ShippingMethodObject:
      type: string
      enum: [FedEx, UPS]
    
    ShippingOptionValid:
      type: array
      minItems: 1
      uniqueItems: true
      items:
        type: object
        properties:
          seller_id:
            $ref: '#/components/schemas/SellerId'
          method:
            $ref: '#/components/schemas/ShippingMethodObject'
        required:
          - method
          - seller_id
      example:
        - method: UPS
          seller_id: 27037
        - method: FedEx
          seller_id: 18830
    
    ShippingOptionErrDetail:
      type: array
      items:
        type: object
        properties:
          seller_id:
            type: string
            enum: [empty, not-exist, not-support]
            description: the error message `not-support` is present when user assigns an existing seller / store unrelated to the given order.
          method:
            type: string
            enum: [empty, not-support]
      example:
        - method: not-support
          seller_id: not-exist
        - method: empty
          seller_id: empty
    
    ContactValid:
      type: object
      properties:
        first_name:
          type: string
          example: Jon
        last_name:
          type: string
          example: Snow
        emails:
          type: array
          minItems: 1
          uniqueItems: true
          items:
            type: string
          example: ['tobi@ninjacat.io', 'mindful@iowalab.idv', 'move@aheadof.light']
        phones:
          type: array
          minItems: 1
          uniqueItems: true
          items:
            anyOf:
            - $ref: '#/components/schemas/PhoneNumberValid'
          example: [{"nation": 44, "number": "0192839741"}, {"nation": 79, "number":"00284018"}]
      required:
        - first_name
        - last_name
        - emails
        - phones
    
    ContactErrDetail:
      type: object
      properties:
        first_name:
          type: string
          enum: [empty, invalid-char]
        last_name:
          type: string
          enum: [empty, invalid-char]
        emails:
          type: array
          description: error detail is located at corresponding index of the array element, `null` means the email has valid format.
          items:
            type: string
            enum: [invalid-code, invalid-char]
          example: [null, 'invalid-code', 'invalid-char']
        phones:
          type: array
          items:
            $ref: '#/components/schemas/PhoneNumberErrDetail'
        quota_email:
          $ref: '#/components/schemas/QuotaResourceError'
        quota_phone:
          $ref: '#/components/schemas/QuotaResourceError'
        non-field:
            type: string
            enum: [EmailMissing, PhoneMissing, QuotaExceed]
    
    PhoneNumberValid:
      type: object
      properties:
        nation:
          type: integer
          format: uint16
          example: 886
        number:
          type: string
          example: '09138411'
      required:
        - nation
        - number
    PhoneNumberErrDetail:
      type: object
      properties:
        nation:
          type: string
          enum: [invalid-code]
        number:
          type: string
          enum: [invalid-char, empty]

    OrderSuccessResponse:
      type: object
      properties:
        order_id:
          type: string
          example: GiJOe87
        usr_id:
          type: integer
          format: uint32
          example: 22761
        time:
          type: integer
          format: uint64
          example: 110827382
        currency:
          $ref: '#/components/schemas/OrderCurrencySnapshot'
        reserved_lines:
          type: array
          minItems: 1
          items:
            allOf:
            - $ref: '#/components/schemas/PayOrderLineObject'
    
    OrderCreateErrorResponse:
      type: object
      description: note the field `quota_olines` indicates number of different  lines in the given request exceeds user quota `max-number-order-lines`
      properties:
        order_lines:
          type: array
          items:
            anyOf:
            - $ref: '#/components/schemas/OrderLineCreateError'
        shipping:
          $ref: '#/components/schemas/ShippingErrDetail'
        billing:
          $ref: '#/components/schemas/BillingErrDetail'
        quota_olines:
          $ref: '#/components/schemas/QuotaResourceError'
    
    OrderEditErrorResponse:
      type: object
      properties:
        shipping:
          $ref: '#/components/schemas/ShippingErrDetail'
        billing:
          $ref: '#/components/schemas/BillingErrDetail'
        non-field:
          type: string
          enum: [billing-locked, shipping-locked, order-archived]
    
    CartTopLvl:
      type: object
      properties:
        title:
          type: string
          default: 'Untitled'
          example: 'Holiday shop list'
        lines:
          type: array
          items:
            allOf:
            - $ref: '#/components/schemas/CartLineObject'
    
    CartLineObject:
      $ref: '#/components/schemas/OrderLineObject'

  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT


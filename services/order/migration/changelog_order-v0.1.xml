<?xml version="1.0" encoding="UTF-8"?>
<databaseChangeLog
        xmlns="http://www.liquibase.org/xml/ns/dbchangelog"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xmlns:pro="http://www.liquibase.org/xml/ns/pro"
        xsi:schemaLocation="http://www.liquibase.org/xml/ns/dbchangelog http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-4.6.xsd
    http://www.liquibase.org/xml/ns/pro http://www.liquibase.org/xml/ns/pro/liquibase-pro-4.6.xsd ">
    <changeSet id="init" author="Haam">
        <tagDatabase tag="0.0.0" />
    </changeSet>
    <changeSet id="add_table__product_policy" author="T.H.">
        <comment>
            policy for all products on sale
        </comment>
        <sql dbms="mariadb">
            CREATE TABLE  `product_policy` (
                `product_type`     ENUM('item', 'package') NOT NULL, 
                `product_id`       BIGINT UNSIGNED NOT NULL,
                `auto_cancel_secs` INT NOT NULL,
                `warranty_hours`   INT NOT NULL,
                PRIMARY KEY (`product_type`, `product_id`)
            )
        </sql>
        <rollback>
            DROP TABLE `product_policy`
        </rollback>
    </changeSet>
    <changeSet id="tag_version_0.0.1" author="T.H.">
        <tagDatabase tag="0.0.1" />
    </changeSet>
    <changeSet id="modify_product_type_enum" author="T.H.">
        <comment>
            Modify enum members in the column `product_type`,
            - '1' means 'item'
            - '2' means 'package'
            Also `auto_cancel_secs`, `warranty_hours` should be unsigned 32-bit integers.
            Note currently the table does not have any record yet, it is allowed to modify the
            schema directly, with records and live production server there should be several
            steps for the upgrade
        </comment>
        <sql dbms="mariadb">
            ALTER TABLE `product_policy` MODIFY `product_type` ENUM('1', '2') NOT NULL;
            ALTER TABLE `product_policy` MODIFY `auto_cancel_secs` INT UNSIGNED NOT NULL;
            ALTER TABLE `product_policy` MODIFY `warranty_hours`   INT UNSIGNED NOT NULL;
        </sql>
        <rollback>
            ALTER TABLE `product_policy` MODIFY `warranty_hours`   INT NOT NULL;
            ALTER TABLE `product_policy` MODIFY `auto_cancel_secs` INT NOT NULL;
            ALTER TABLE `product_policy` MODIFY `product_type` ENUM('item', 'package') NOT NULL;
        </rollback>
    </changeSet>
    <changeSet id="tag_version_0.0.2" author="T.H.">
        <tagDatabase tag="0.0.2" />
    </changeSet>
    <changeSet id="add_table__product_price" author="T.H.">
        <comment>
            price for all products on sale,
            - the columns `start_tz_utc` and `end_tz_utc` indicate the timezone and number of minutes from local time to UTC for `start_after` and `end_before` respectively
            - In this application, it is unnecessary to specify microsecond precision for product price and stock level check, mariaDB defaults to zero without configuring the precision
        </comment>
        <sql dbms="mariadb">
            CREATE TABLE  `product_price` (
                `store_id`         INT UNSIGNED NOT NULL,
                `product_type`     ENUM('1', '2') NOT NULL, 
                `product_id`       BIGINT UNSIGNED NOT NULL,
                `price`         INT UNSIGNED  NOT NULL,
                `start_after`   DATETIME  NOT NULL,
                `end_before`    DATETIME  NOT NULL,
                `start_tz_utc`  SMALLINT  NOT NULL,
                `end_tz_utc`    SMALLINT  NOT NULL,
                PRIMARY KEY (`store_id`, `product_type`, `product_id`)
            )
        </sql>
        <rollback>
            DROP TABLE `product_price`
        </rollback>
    </changeSet>
    <changeSet id="tag_version_0.0.3" author="T.H.">
        <tagDatabase tag="0.0.3" />
    </changeSet>
    <changeSet id="add_table__stock_level_inventory" author="T.H.">
        <comment>
            stock level for all products on sale,
            - `qty_cancelled` indicates quantity of products has been cancelled by (internal) inventory service, the quantity which is no longer available to customers.
            - `expiry` always represents some time with UTC, time zone is not essential to save for this application
            - currently `expiry` is part of natural (primary) key, when the data grows to millions of records, consider to replace `expiry` column with some surrogate key.
            - TODO, convert `expiry` to `DATETIME` type, save as UTC time
            - mariaDB automatically modifies value of a timestamp column (`expiry` for example) if it is not prsent in a updating row
              - currently in this application, `expiry` cannot be modified once created (TODO, fix this problem)
              - by explcitly adding `DEFAULT xxx`, it can avoid MariaDB from appending `ON UPDATE CURRENT_TIMESTAMP` syntax to the timestamp column definition.
        </comment>
        <sql dbms="mariadb">
            CREATE TABLE  `stock_level_inventory` (
                `store_id`      INT UNSIGNED NOT NULL,
                `product_type`  ENUM('1', '2') NOT NULL, 
                `product_id`    BIGINT UNSIGNED NOT NULL,
                `expiry`        TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
                `qty_total`     INT UNSIGNED NOT NULL,
                `qty_cancelled` INT UNSIGNED NOT NULL,
                PRIMARY KEY (`store_id`, `product_type`, `product_id`, `expiry`)
            );
        </sql>
        <rollback>
            DROP TABLE `stock_level_inventory`;
        </rollback>
    </changeSet>
    <changeSet id="tag_version_0.0.4" author="T.H.">
        <tagDatabase tag="0.0.4" />
    </changeSet>
    <changeSet id="add_qty_tot_rsv__stock_inventory" author="T.H.">
        <comment>
            store total number of reserved items for specific product, the application
            should never load all order lines relavant to the stock product
        </comment>
        <sql dbms="mariadb">
            ALTER TABLE `stock_level_inventory` ADD COLUMN `qty_tot_rsv` INT UNSIGNED NOT NULL DEFAULT 0 ;
        </sql>
        <rollback>
            ALTER TABLE `stock_level_inventory` DROP COLUMN `qty_tot_rsv`;
        </rollback>
    </changeSet>
    <changeSet id="add_table__order_toplvl_meta" author="T.H.">
        <comment>
            - consider most of reads come from specific user, the primary index is constructed
              with user-id followed by order-id, however it might cause errors when another table
              attempts to reference this table as foreign key.
            - `created_time` represents the time in UTC,
            - `ctime_tz_utc` indicates offset in number of minutes from UTC
        </comment>
        <sql dbms="mariadb">
            CREATE TABLE  `order_toplvl_meta` (
                `o_id`     BINARY(16) NOT NULL,
                `usr_id`   INT UNSIGNED NOT NULL,
                `created_time`    TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,
                `ctime_tz_utc`    SMALLINT  NOT NULL,
                PRIMARY KEY (`usr_id`,`o_id`)
            );
        </sql>
        <rollback>
            DROP TABLE `order_toplvl_meta`;
        </rollback>
    </changeSet>
    <changeSet id="add_table__stock_rsv_detail" author="T.H.">
        <comment>
            - the key (index) in this table cannot uniquely identify each row, consider the key size may be
              very large if it covers order-id , TODO, recheck any drawback on this, and feasible solution
              e.g. idempotency implementation by sending request key 
            - if the table grows to large data set, it needs to be partitioned and cannot rely on foreign
              key constraint for data integrity check, in such case, consider to move the check function
              to application code
            - constraint on order-id cannot be applied to the table due to foreign key limit in mariaDB,
              the application is responsible to delete the records as soon as deleting the relavant order
              in another table `order_toplvl_meta`
            - TODO, convert `expiry` to `DATETIME` type, save as UTC time
        </comment>
        <sql dbms="mariadb">
            CREATE TABLE  `stock_rsv_detail` (
                `store_id`      INT UNSIGNED NOT NULL,
                `product_type`  ENUM('1', '2') NOT NULL, 
                `product_id`    BIGINT UNSIGNED NOT NULL,
                `expiry`        TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
                `order_id`      BINARY(16) NOT NULL,
                `qty_reserved`  INT UNSIGNED NOT NULL,
                KEY `stk_rsv_idx_0_pid` (`store_id`, `product_type`, `product_id`, `order_id`(2)) ,
                CONSTRAINT `c_fk_stock_prod_id` FOREIGN KEY (`store_id`, `product_type`, `product_id`, `expiry`)
                    REFERENCES `stock_level_inventory`(`store_id`, `product_type`, `product_id`, `expiry`)
                    ON UPDATE CASCADE ON DELETE CASCADE
            );
        </sql>
        <rollback>
            DROP TABLE `stock_rsv_detail`;
        </rollback>
    </changeSet>
    <changeSet id="tag_version_0.0.5" author="T.H.">
        <tagDatabase tag="0.0.5" />
    </changeSet>
    <changeSet id="modify_createtime__order_toplvl_meta" author="T.H.">
        <comment>
            -  `TIMESTAMP` column holds number of seconds until `2038-01-19 03:14:07`, to avoid The 2038 Problem (a.k.a. Y2K38), modify the `expiry` column to `DATETIME` type
            - `created_time` should be always converted to UTC timezone before it is saved, `DATETIME` column cannot provide timezone info
        </comment>
        <sql dbms="mariadb">
            ALTER TABLE `order_toplvl_meta` MODIFY `created_time` DATETIME(3) NOT NULL;
            ALTER TABLE `order_toplvl_meta` DROP `ctime_tz_utc`;
        </sql>
        <rollback>
            ALTER TABLE `order_toplvl_meta` ADD `ctime_tz_utc` SMALLINT  NOT NULL;
            ALTER TABLE `order_toplvl_meta` MODIFY `created_time` TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP;
        </rollback>
    </changeSet>
    <changeSet id="add_table__order_line_detail" author="T.H.">
        <comment>
            - `qty_paid_last_update`, `rsved_until` and `warranty_until` should be saved as UTC time
            - `price_unit` and `price_total` indicate smallest unit of seller's currency to pay for
               a single item or whole items of the order line . This is current implementation of
               multi-currency support.
            TODO,
            - learn when to set reference constraint on order-id, and when not to do so
            - build another index for `rsved_until`, in case the application queries the
              order lines by time range
            - better design option for multi-currency support
        </comment>
        <sql dbms="mariadb">
            CREATE TABLE  `order_line_detail` (
                `o_id`   BINARY(16) NOT NULL,
                `seq`    SMALLINT  NOT NULL,
                `store_id`      INT UNSIGNED NOT NULL,
                `product_type`  ENUM('1', '2') NOT NULL, 
                `product_id`    BIGINT UNSIGNED NOT NULL,
                `price_unit`    INT UNSIGNED NOT NULL,
                `price_total`   INT UNSIGNED NOT NULL,
                `qty_rsved`    INT UNSIGNED NOT NULL,
                `qty_paid`     INT UNSIGNED NOT NULL DEFAULT 0,
                `qty_paid_last_update`  DATETIME(2) NULL DEFAULT NULL,
                `rsved_until`      DATETIME  NOT NULL,
                `warranty_until`   DATETIME  NOT NULL,
                PRIMARY KEY (`o_id`, `seq`)
            );
        </sql>
        <rollback>
            DROP TABLE `order_line_detail`;
        </rollback>
    </changeSet>

    <changeSet id="tag_version_0.0.6" author="T.H.">
        <tagDatabase tag="0.0.6" />
    </changeSet>
    <changeSet id="modify_pk__order_toplvl_meta" author="T.H.">
        <comment>
            TODO, consider performance improvement if data grows in the table :
            - need another index that looks up all orders by given user-id
            - need partial index for create-time range scan, it is useful for replicating recently
              created orders to other services, but in such case time-series database might be more
              appropriate approach ?
            - note the application inserts records to this table once and then never modifies
              them, users may query their order history several times, in other words the use
              case here is write-once and read-many-times, more indices in database may cause slow
              insertion but fast read.
        </comment>
        <sql dbms="mariadb">
            ALTER TABLE `order_toplvl_meta` DROP PRIMARY KEY;
            ALTER TABLE `order_toplvl_meta` ADD PRIMARY KEY (`o_id`);
        </sql>
        <rollback>
            ALTER TABLE `order_toplvl_meta` DROP PRIMARY KEY;
            ALTER TABLE `order_toplvl_meta` ADD PRIMARY KEY (`usr_id`,`o_id`);
        </rollback>
    </changeSet>

    <changeSet id="add_table__order_contact_meta" author="T.H.">
        <comment>
            - note the columns of a foreign referencing key in `bill_contact_meta` should cover all
              the columns of a referenced key in `order_toplvl_meta`, even the order has to be the same
        </comment>
        <sql dbms="mariadb">
            CREATE TABLE  `bill_contact_meta` (
                `o_id`   BINARY(16) NOT NULL PRIMARY KEY,
                `first_name`  VARCHAR(32) CHARACTER SET utf8 NOT NULL,
                `last_name`   VARCHAR(32) CHARACTER SET utf8 NOT NULL,
                CONSTRAINT `c_fk_order_id_0` FOREIGN KEY (`o_id`) REFERENCES `order_toplvl_meta`(`o_id`)
                    ON UPDATE CASCADE ON DELETE CASCADE
            );
            CREATE TABLE  `ship_contact_meta` (
                `o_id`   BINARY(16) NOT NULL PRIMARY KEY,
                `first_name`  VARCHAR(32) CHARACTER SET utf8 NOT NULL,
                `last_name`   VARCHAR(32) CHARACTER SET utf8 NOT NULL,
                CONSTRAINT `c_fk_order_id_1` FOREIGN KEY (`o_id`) REFERENCES `order_toplvl_meta`(`o_id`)
                    ON UPDATE CASCADE ON DELETE CASCADE
            );
        </sql>
        <rollback>
            DROP TABLE `ship_contact_meta`;
            DROP TABLE `bill_contact_meta`;
        </rollback>
    </changeSet>
    <changeSet id="add_table__order_contact_email" author="T.H.">
        <comment>
            currently the application does not consider any non-ascii character in a given email
        </comment>
        <sql dbms="mariadb">
            CREATE TABLE  `bill_contact_email` (
                `o_id`   BINARY(16) NOT NULL,
                `seq`    SMALLINT  NOT NULL,
                `mail`   VARCHAR(128)  CHARACTER SET ascii NOT NULL,
                PRIMARY KEY (`o_id`, `seq`),
                CONSTRAINT `c_fk_order_id_2` FOREIGN KEY (`o_id`) REFERENCES `order_toplvl_meta`(`o_id`)
                    ON UPDATE CASCADE ON DELETE CASCADE
            );
            CREATE TABLE  `ship_contact_email` (
                `o_id`   BINARY(16) NOT NULL,
                `seq`    SMALLINT  NOT NULL,
                `mail`   VARCHAR(128)  CHARACTER SET ascii NOT NULL,
                PRIMARY KEY (`o_id`, `seq`),
                CONSTRAINT `c_fk_order_id_3` FOREIGN KEY (`o_id`) REFERENCES `order_toplvl_meta`(`o_id`)
                    ON UPDATE CASCADE ON DELETE CASCADE
            );
        </sql>
        <rollback>
            DROP TABLE `ship_contact_email`;
            DROP TABLE `bill_contact_email`;
        </rollback>
    </changeSet>
    <changeSet id="add_table__order_contact_phone" author="T.H.">
        <comment>
        </comment>
        <sql dbms="mariadb">
            CREATE TABLE  `bill_contact_phone` (
                `o_id`    BINARY(16) NOT NULL,
                `seq`     SMALLINT  NOT NULL,
                `nation`  SMALLINT  UNSIGNED NOT NULL,
                `number`  VARCHAR(16)  CHARACTER SET ascii NOT NULL,
                PRIMARY KEY (`o_id`, `seq`),
                CONSTRAINT `c_fk_order_id_4` FOREIGN KEY (`o_id`) REFERENCES `order_toplvl_meta`(`o_id`)
                    ON UPDATE CASCADE ON DELETE CASCADE
            );
            CREATE TABLE  `ship_contact_phone` (
                `o_id`    BINARY(16) NOT NULL,
                `seq`     SMALLINT  NOT NULL,
                `nation`  SMALLINT  UNSIGNED NOT NULL,
                `number`  VARCHAR(16)  CHARACTER SET ascii NOT NULL,
                PRIMARY KEY (`o_id`, `seq`),
                CONSTRAINT `c_fk_order_id_5` FOREIGN KEY (`o_id`) REFERENCES `order_toplvl_meta`(`o_id`)
                    ON UPDATE CASCADE ON DELETE CASCADE
            );
        </sql>
        <rollback>
            DROP TABLE `ship_contact_phone`;
            DROP TABLE `bill_contact_phone`;
        </rollback>
    </changeSet>
    <changeSet id="add_table__order_phyaddr" author="T.H.">
        <comment>
            - in application physical address is optional in billing / shipping info, that is
              why it is split into 2 tables
        </comment>
        <sql dbms="mariadb">
            CREATE TABLE  `bill_phyaddr` (
                `o_id`      BINARY(16) NOT NULL,
                `country`   ENUM('TW','TH','IN','ID','US') NOT NULL, 
                `region`    VARCHAR(32)   CHARACTER SET utf8  NOT NULL,
                `city`      VARCHAR(32)   CHARACTER SET utf8  NOT NULL,
                `distinct`  VARCHAR(64)   CHARACTER SET utf8  NOT NULL,
                `street`    VARCHAR(32)   CHARACTER SET utf8  DEFAULT NULL,
                `detail`    VARCHAR(256)  CHARACTER SET utf8  NOT NULL,
                PRIMARY KEY (`o_id`),
                CONSTRAINT `c_fk_order_id_6` FOREIGN KEY (`o_id`) REFERENCES `order_toplvl_meta`(`o_id`)
                    ON UPDATE CASCADE ON DELETE CASCADE
            );
            CREATE TABLE  `ship_phyaddr` (
                `o_id`    BINARY(16) NOT NULL,
                `country`   ENUM('TW','TH','IN','ID','US') NOT NULL, 
                `region`    VARCHAR(32)   CHARACTER SET utf8  NOT NULL,
                `city`      VARCHAR(32)   CHARACTER SET utf8  NOT NULL,
                `distinct`  VARCHAR(64)   CHARACTER SET utf8  NOT NULL,
                `street`    VARCHAR(32)   CHARACTER SET utf8  DEFAULT NULL,
                `detail`    VARCHAR(256)  CHARACTER SET utf8  NOT NULL,
                PRIMARY KEY (`o_id`),
                CONSTRAINT `c_fk_order_id_7` FOREIGN KEY (`o_id`) REFERENCES `order_toplvl_meta`(`o_id`)
                    ON UPDATE CASCADE ON DELETE CASCADE
            );
        </sql>
        <rollback>
            DROP TABLE `ship_phyaddr`;
            DROP TABLE `bill_phyaddr`;
        </rollback>
    </changeSet>
    <changeSet id="add_table__order_ship_option" author="T.H.">
        <comment>
        </comment>
        <sql dbms="mariadb">
            CREATE TABLE  `ship_option` (
                `o_id`        BINARY(16) NOT NULL,
                `seller_id`   INT UNSIGNED NOT NULL,
                `method`      ENUM('UPS','FedEx','BlackCatExpress','Unknown') NOT NULL, 
                PRIMARY KEY (`o_id`, `seller_id`),
                CONSTRAINT `c_fk_order_id_8` FOREIGN KEY (`o_id`) REFERENCES `order_toplvl_meta`(`o_id`)
                    ON UPDATE CASCADE ON DELETE CASCADE
            );
        </sql>
        <rollback>
            DROP TABLE `ship_option`;
        </rollback>
    </changeSet>

    <changeSet id="tag_version_0.1.0" author="T.H.">
        <tagDatabase tag="0.1.0" />
    </changeSet>
    <changeSet id="add_table__schedule_job" author="T.H.">
        <comment>
            - the table persists attributes required by job scheduler, the application updates state of 
              the valid orders at certain interval. Such attributes can also be saved in other
              non-relational database.
            - currently only one column records last update time for one backend server, if there are
              more machines / servers , the table may be expanded with new column for machine identifier
        </comment>
        <sql dbms="mariadb">
            CREATE TABLE  `schedule_job` (`last_update`  DATETIME NOT NULL);
            INSERT INTO `schedule_job`(`last_update`) VALUES ('2024-02-07 06:00:00');
        </sql>
        <rollback>
            DROP TABLE `schedule_job`;
        </rollback>
    </changeSet>

    <changeSet id="tag_version_0.1.1" author="T.H.">
        <tagDatabase tag="0.1.1" />
    </changeSet>
    <changeSet id="modify_expiry_type__stock" author="T.H.">
        <comment>
            `TIMESTAMP` column holds number of seconds until `2038-01-19 03:14:07`, to avoid The 2038 Problem (a.k.a. Y2K38), modify the `expiry` column to `DATETIME` type
        </comment>
        <sql dbms="mariadb">
            ALTER TABLE `stock_rsv_detail` DROP FOREIGN KEY `c_fk_stock_prod_id`;
            ALTER TABLE `stock_rsv_detail` MODIFY COLUMN `expiry` DATETIME NOT NULL;
            ALTER TABLE `stock_level_inventory` MODIFY COLUMN `expiry` DATETIME NOT NULL;
            ALTER TABLE `stock_rsv_detail` ADD CONSTRAINT `c_fk_stock_prod_id`
                FOREIGN KEY (`store_id`, `product_type`, `product_id`, `expiry`)
                REFERENCES `stock_level_inventory`(`store_id`, `product_type`, `product_id`, `expiry`)
                ON UPDATE CASCADE ON DELETE CASCADE ;
        </sql>
        <rollback>
            ALTER TABLE `stock_rsv_detail` DROP FOREIGN KEY `c_fk_stock_prod_id`;
            ALTER TABLE `stock_level_inventory` MODIFY COLUMN `expiry`  TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP;
            ALTER TABLE `stock_rsv_detail` MODIFY COLUMN `expiry`  TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP;
            ALTER TABLE `stock_rsv_detail` ADD CONSTRAINT `c_fk_stock_prod_id`
                FOREIGN KEY (`store_id`, `product_type`, `product_id`, `expiry`)
                REFERENCES `stock_level_inventory`(`store_id`, `product_type`, `product_id`, `expiry`)
                ON UPDATE CASCADE ON DELETE CASCADE ;
        </rollback>
    </changeSet>
    <changeSet id="tag_version_0.1.2" author="T.H.">
        <tagDatabase tag="0.1.2" />
    </changeSet>
    <changeSet id="add__order_line_return_req" author="T.H.">
        <comment> </comment>
        <sql dbms="mariadb">
            CREATE TABLE  `oline_return_req` (
                `o_id`   BINARY(16) NOT NULL,
                `seq`    SMALLINT  NOT NULL,
                `store_id`      INT UNSIGNED NOT NULL,
                `product_type`  ENUM('1', '2') NOT NULL, 
                `product_id`    BIGINT UNSIGNED NOT NULL,
                `price_unit`    INT UNSIGNED NOT NULL,
                `price_total`   INT UNSIGNED NOT NULL,
                `quantity`      INT UNSIGNED NOT NULL,
                `create_time`   DATETIME  NOT NULL,
                PRIMARY KEY (`o_id`, `seq`)
            );
        </sql>
        <rollback>
            DROP TABLE `oline_return_req`;
        </rollback>
    </changeSet>
    <changeSet id="tag_version_0.1.3" author="T.H.">
        <tagDatabase tag="0.1.3" />
    </changeSet>
    <changeSet id="add__num_items_rsv__product_policy" author="T.H.">
        <comment>
            the columns `max_num_rsv`, `min_num_rsv` indicate maxinum and minimum number of items allowed to reserve per order transaction respectively 
        </comment>
        <sql dbms="mariadb">
            ALTER TABLE `product_policy` ADD `max_num_rsv` SMALLINT UNSIGNED NOT NULL;
            ALTER TABLE `product_policy` ADD `min_num_rsv` SMALLINT UNSIGNED NOT NULL;
        </sql>
        <rollback>
            ALTER TABLE `product_policy` DROP `max_num_rsv`;
            ALTER TABLE `product_policy` DROP `min_num_rsv`;
        </rollback>
    </changeSet>
    <changeSet id="tag_version_0.1.4" author="T.H.">
        <tagDatabase tag="0.1.4" />
    </changeSet>
    
    <changeSet id="add__cart_metadata_lines" author="T.H.">
        <comment>
            - Add 2 tables for recording user cart , each user can edit several carts as their order draft before checkout
            - The index of the table `cart_line_detail` does not uniquely identify any single row. To access specific cart, users have to provide their profile ID `usr_id` and cart sequence number `seq` , this application assumes that number of lines in each cart won't be large, so these 2 columns help to narrow down the search efficiently.
        </comment>
        <sql dbms="mariadb">
            CREATE TABLE `cart_toplvl_meta` (
                `usr_id`   INT UNSIGNED NOT NULL,
                `seq`      TINYINT UNSIGNED NOT NULL,
                `title`    VARCHAR(128)  CHARACTER SET utf8  NOT NULL,
                PRIMARY KEY (`usr_id`, `seq`)
            );
            CREATE TABLE `cart_line_detail` (
                `usr_id`   INT UNSIGNED NOT NULL,
                `seq`      TINYINT UNSIGNED NOT NULL,
                `store_id`      INT UNSIGNED NOT NULL,
                `product_type`  ENUM('1', '2') NOT NULL, 
                `product_id`    BIGINT UNSIGNED NOT NULL,
                `quantity`      INT UNSIGNED NOT NULL,
                KEY `cartline_detail_index_user_id`(`usr_id`, `seq`)
            );
        </sql>
        <rollback>
            DROP TABLE `cart_line_detail`;
            DROP TABLE `cart_toplvl_meta`;
        </rollback>
    </changeSet>
    <changeSet id="tag_version_0.1.5" author="T.H.">
        <tagDatabase tag="0.1.5" />
    </changeSet>
    <changeSet id="add__seller_price_meta" author="T.H.">
        <comment>
        </comment>
        <sql dbms="mariadb">
            CREATE TABLE  `seller_price_meta` (
                `id`         INT UNSIGNED NOT NULL PRIMARY KEY,
                `currency`   ENUM('IDR', 'INR', 'TWD', 'THB', 'USD') NOT NULL 
            );
        </sql>
        <rollback>
            DROP TABLE `seller_price_meta`;
        </rollback>
    </changeSet>
    <changeSet id="tag_version_0.1.6" author="T.H.">
        <tagDatabase tag="0.1.6" />
    </changeSet>
    <changeSet id="add__currency_exchange" author="T.H.">
        <comment>
        </comment>
        <sql dbms="mariadb">
            CREATE TABLE  `currency_exchange` (
                `name`  ENUM('USD','TWD','INR','IDR','THB') NOT NULL  PRIMARY KEY,
                `rate`  DECIMAL(12, 4) SIGNED NOT NULL
            );
            INSERT INTO `currency_exchange`(`name`,`rate`) VALUES
                ('USD', 0.0), ('THB', 0.0), ('IDR', 0.0), ('INR', 0.0), ('TWD', 0.0);
        </sql>
        <rollback>
            DROP TABLE `currency_exchange`;
        </rollback>
    </changeSet>
    <changeSet id="tag_version_0.1.7" author="T.H.">
        <tagDatabase tag="0.1.7" />
    </changeSet>
    <changeSet id="add_buyer_currency__order_toplvl_meta" author="T.H.">
        <comment>
            snapshot currency exchange rate on buyer's side when creating new order
        </comment>
        <sql dbms="mariadb">
            ALTER TABLE `order_toplvl_meta` ADD `buyer_currency`  ENUM('USD','TWD','INR','IDR','THB')  NOT NULL;
            ALTER TABLE `order_toplvl_meta` ADD `buyer_ex_rate`  DECIMAL(12, 4) SIGNED  NOT NULL;
        </sql>
        <rollback>
            ALTER TABLE `order_toplvl_meta` DROP `buyer_currency`;
            ALTER TABLE `order_toplvl_meta` DROP `buyer_ex_rate`;
        </rollback>
    </changeSet>
    <changeSet id="add_table__oseller_currency_snapshot" author="T.H.">
        <comment>
            snapshot currency exchange rates on sellers' side when creating new order
        </comment>
        <sql dbms="mariadb">
            CREATE TABLE  `oseller_currency_snapshot` (
                `o_id`       BINARY(16) NOT NULL,
                `seller_id`  INT UNSIGNED NOT NULL,
                `label`    ENUM('USD','TWD','INR','IDR','THB') NOT NULL,
                `ex_rate`  DECIMAL(12, 4) SIGNED NOT NULL,
                PRIMARY KEY (`o_id`, `seller_id`)
            );
        </sql>
        <rollback>
            DROP TABLE  `oseller_currency_snapshot`;
        </rollback>
    </changeSet>
    
    <changeSet id="tag_version_0.1.8" author="T.H.">
        <tagDatabase tag="0.1.8" />
    </changeSet>
</databaseChangeLog>

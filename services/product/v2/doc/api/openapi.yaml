openapi: 3.0.3
info:
  title: Product Service
  description: |-
    This is API documentation of product information web service based on the OpenAPI 3.0 specification.
    termsOfService: http://swagger.io/terms/
  contact:
    email: xyz@my-payment-app.io
  license:
    name: MIT
    url: https://github.com/metalalive/e_commerce/blob/master/LICENSE
  version: 2.0.2

servers:
  - url: https://doc.site.not.ready/api/v2.0.1
tags:
  - name: tagging
    description: |
        labels for tagging / categorizing products
  - name: attribute-label
    description: labels for attributes of product items, e.g. color, material
  - name: saleable
    description: |
        saleable items or packages (group of items)

paths:
  /tag:
    post:
      summary: Create a new tag
      description: Creates a new tag with an optional parent.
      tags:
      - tagging
      security:
      - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TagCreateReqDto'
      responses:
        '200':
          description: Tag created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TagUpdateRespDto'

  /tag/{t_id}:
    patch:
      summary: Update an existing tag
      description: Modifies an existing tag by updating its name and optional parent.
      tags:
      - tagging
      parameters:
        - $ref: '#/components/parameters/TagNodeId'
      security:
      - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TagUpdateReqDto'
      responses:
        '200':
          description: Tag updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TagUpdateRespDto'
    delete:
      summary: Delete an existing tag
      tags:
      - tagging
      parameters:
        - $ref: '#/components/parameters/TagNodeId'
      security:
      - BearerAuth: []
      responses:
        '204':
          description: Tag deleted successfully
        '410':
          description: Tag not exists
    get:
      summary: Retrieve a tag with its ancestors and descendants
      description: Retrieves the specified tag along with optional ancestors and descendants.
      tags:
      - tagging
      parameters:
        - $ref: '#/components/parameters/TagNodeId'
        - name: acs
          in: query
          required: false
          schema:
            type: integer
          description: Optional parameter to filter ancestors
          example: 1
        - name: desc_lvl
          in: query
          required: false
          schema:
            type: integer
          description: Optional parameter to specify descendant level
          example: 2
      responses:
        '200':
          description: Tag retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TagReadRespDto'
  /attributes:
    post:
      summary: Create attributes
      description: Creates multiple attribute labels.
      tags:
      - attribute-label
      security:
      - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/AttrCreateReqDto'
      responses:
        '201':
          description: Attributes created successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AttrLabelDto'
    put:
      summary: Update attributes
      description: Bulk Update attribute labels.
      tags:
      - attribute-label
      security:
      - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/AttrLabelDto'
      responses:
        '200':
          description: Attributes created successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AttrLabelDto'
    delete:
      summary: Delete an existing attribute labels
      tags:
      - attribute-label
      parameters:
        - name: ids
          in: query
          required: true
          schema:
            type: string
          description: list of attribute label IDs delimited by character `,`
          example: 'In1nDer,TaiGG,o9ur3'
      security:
      - BearerAuth: []
      responses:
        '204':
          description: Attributes deleted successfully
    get:
      summary: search attributes
      description: search attribute labels by keyword.
      tags:
      - attribute-label
      parameters:
        - name: keyword
          in: query
          required: true
          schema:
            type: string
          description: keyword for search
          example: 'rotation-per-minute'
      responses:
        '200':
          description: read successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AttrLabelDto'

  /item:
    post:
      summary: Create a new product item
      description: Creates a new product item with attributes, tags, and media references.
      tags:
        - saleable
      security:
      - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SaleItemCreateReqDto'
      responses:
        '201':
          description: Product item created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SaleItemDto'

  /item/{prod_item_id}/private:
    get:
      summary: get a saleable item for maintainer regardless of its visibility state
      description: |
        TODO, add query parameters to show history data for past customer orders, which may be required to retrieve old product attribute snapshot
      tags:
        - saleable
      parameters:
        - $ref: '#/components/parameters/ProdItemId'
      security:
      - BearerAuth: []
      responses:
        '200':
          description: Product item loaded successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SaleItemDto'

  /item/{prod_item_id}:
    get:
      summary: get a visible saleable item for everyone
      tags:
        - saleable
      parameters:
        - $ref: '#/components/parameters/ProdItemId'
      responses:
        '200':
          description: Product item loaded successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SaleItemDto'

    put:
      summary: update an existing product item
      description: |
          Overwrite all the attributes, tags, and media references to the existing product information,
          old one will become read-only records for future historical search.
      tags:
        - saleable
      parameters:
        - $ref: '#/components/parameters/ProdItemId'
      security:
      - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SaleItemCreateReqDto'
      responses:
        '200':
          description: Product item updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SaleItemDto'

    delete:
      summary: discard a product item
      tags:
        - saleable
      parameters:
        - $ref: '#/components/parameters/ProdItemId'
      security:
      - BearerAuth: []
      responses:
        '204':
          description: Product item discarded successfully

  /items/search:
    get:
      summary: saleable items search for everyone
      description: Retrieve a list of visible saleable items based on search keywords.
      tags:
        - saleable
      parameters:
        - $ref: '#/components/parameters/SearchKeyword'
      responses:
        '200':
          description: Search results returned successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SaleItemDto'

  /items/search/private:
    get:
      summary: saleable items search for privileged maintainers
      description: Retrieve a list of saleable items based on search keywords.
      tags:
        - saleable
      parameters:
        - $ref: '#/components/parameters/SearchKeyword'
      security:
      - BearerAuth: []
      responses:
        '200':
          description: Search results returned successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SaleItemDto'


components:
  parameters:
    TagNodeId:
      name: t_id
      in: path
      required: true
      schema:
        $ref: '#/components/schemas/TagNodeId'

    ProdItemId:
      name: prod_item_id
      in: path
      required: true
      schema:
        $ref: '#/components/schemas/ProductBaseId'

    SearchKeyword:
      name: k
      in: query
      required: true
      schema:
        type: string
      description: The keyword used to search for products.
      example: "laptop"

  schemas:
    TagNodeId:
      description: The ID of the tag node.
      type: string
      example: 4uXwI-560

    ProductBaseId:
      description: 8-bytes product base ID
      type: integer
      example: 103027494

    TagCreateReqDto:
      type: object
      properties:
        name:
          type: string
          description: The name of the tag.
          example: "New Tag"
        parent:
          $ref: '#/components/schemas/TagNodeId'
      required:
        - name

    TagUpdateReqDto:
      $ref: '#/components/schemas/TagCreateReqDto'

    TagNodeDto:
      type: object
      properties:
        name:
          type: string
          description: The name of the tag node.
          example: "New Tag"
        id_:
          $ref: '#/components/schemas/TagNodeId'
      required:
        - name
        - id_

    TagUpdateRespDto:
      type: object
      properties:
        node:
          $ref: '#/components/schemas/TagNodeDto'
        parent:
          $ref: '#/components/schemas/TagNodeId'
      required:
        - node

    TagReadRespDto:
      type: object
      properties:
        curr_node:
          $ref: '#/components/schemas/TagNodeDto'
        ancestors:
          type: array
          items:
            $ref: '#/components/schemas/TagNodeDto'
          nullable: true
        descendants:
          type: array
          items:
            $ref: '#/components/schemas/TagNodeDto'
          nullable: true
      required:
        - curr_node

    AttrLabelId:
      type: string
      description: The unique identifier of the attribute.
      example: "attr12345"

    AttrDataTypeDto:
      type: integer
      description: |
          Data type of the attribute label required on createing product items, possible values are:
            - 1, Integer
            - 2, UnsignedInteger
            - 3. String
            - 4. Boolean
      enum: [1,2,3,4]

    AttrCreateReqDto:
      type: object
      properties:
        name:
          type: string
          description: The name of the attribute.
          example: "attribute_name"
        dtype:
          $ref: '#/components/schemas/AttrDataTypeDto'
      required:
        - name
        - dtype

    AttrLabelDto:
      type: object
      properties:
        id_:
          $ref: '#/components/schemas/AttrLabelId'
        name:
          type: string
          description: The name of the attribute.
          example: "attribute_name"
        dtype:
          $ref: '#/components/schemas/AttrDataTypeDto'
      required:
        - id_
        - name
        - dtype

    SaleItemAttriReqDto:
      type: object
      properties:
        id_:
          type: string
          description: References the ID of an attribute label.
          example: "attr123"
        value:
          oneOf:
            - type: boolean
              example: true
            - type: integer
              minimum: 0
              example: 10
            - type: string
              example: "example_value"
      required:
        - id_
        - value

    SaleItemCreateReqDto:
      type: object
      properties:
        name:
          type: string
          description: The name of the product item.
          example: "New Product"
        visible:
          type: boolean
          description: Indicates whether the product is visible.
          example: true
        tags:
          type: array
          description: List of tag IDs referencing TagNodeDto.
          items:
            type: string
            example: "tag123"
        attributes:
          type: array
          description: List of product attributes.
          items:
            $ref: '#/components/schemas/SaleItemAttriReqDto'
        media_set:
          type: array
          description: List of media resource IDs referencing external multimedia systems.
          items:
            type: string
            example: "media123"
      required:
        - name
        - visible
        - tags
        - attributes
        - media_set

    SaleItemAttriDto:
      type: object
      properties:
        label:
          $ref: '#/components/schemas/AttrLabelDto'
        value:
          oneOf:
            - type: boolean
              example: false
            - type: integer
              minimum: 0
              example: 100
            - type: string
              example: "example_value"

    SaleItemDto:
      type: object
      properties:
        id_:
          type: integer
          description: Unique ID of the product item.
          example: 12345
        name:
          type: string
          description: The name of the product item.
          example: "New Product"
        visible:
          type: boolean
          description: Indicates whether the product is visible.
          example: true
        usrprof:
          type: integer
          description: User profile associated with the product item.
          example: 56789
        tags:
          type: array
          description: List of tag objects referencing TagNodeDto.
          items:
            $ref: '#/components/schemas/TagNodeDto'
        attributes:
          type: array
          description: List of product attributes.
          items:
            $ref: '#/components/schemas/SaleItemAttriDto'
        media_set:
          type: array
          description: List of media resource IDs referencing external multimedia systems.
          items:
            type: string
            example: "media456"
        last_update:
          type: string
          format: datetime
          example: "2014-06-29 15:22:58"
      required:
        - id_
        - name
        - visible
        - usrprof
        - tags
        - attributes
        - media_set
        - last_update

  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

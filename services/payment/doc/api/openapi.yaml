openapi: 3.0.3
info:
  title: Payment Service
  description: |-
    This is API documentation of my payment web service based on the OpenAPI 3.0 specification.
    termsOfService: http://swagger.io/terms/
  contact:
    email: xyz@my-payment-app.io
  license:
    name: MIT
    url: https://github.com/metalalive/e_commerce/blob/master/LICENSE
  version: 0.1.0

servers:
  - url: https://doc.site.not.ready/api/v0.1.0
tags:
  - name: configuration
    description: |
        The configuration helps with easy third-party integration. It provides important details that the third-party processor chosen by the client needs for smooth pay-in, payout, and refund processes.
  - name: payment
    description: |
      - a client initiate a payment associated with a valid order, transfer the fund to this payment service (pay-in),
      - then merchants / sellers capture the fund from this service (payout)
  - name: refund
    description: |
        either a customer or a merchant / seller initiates a return request in order-processing application, the merchant is responsible to complete the request in this application, which transfers full / partial fund back to the customer.
  - name: reporting

paths:
  /charge:
    post:
      summary: charge customer for unpaid order products
      description: |
        charge customer for unpaid order products:
        - the charge status in the response depends on the chosen payment method
        - frontend application may refresh to charge status at a later time if response status is 202
      tags:
        - payment
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChargeReqDto'
      responses:
        '200':
          description: |
            Completed the charge, if the customer does not need to oprovide sensitive data e.g. credit card number to the chosen third-party payment service provider (PSP)
        '202':
          description: |
            Charge session initiated successfully, in this case :
            - frontend application has to set up final payment page hosted by third-party PSP
            - customer should approve the payment in limited time period
            - frontend application has to refresh the status of the charge later, by calling  the same endpoint with `PATCH` method 
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChargeCreateRespDto'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChargeRespErrorDto'
        '409':
          description: the same `charge-id` exists
        '503':
          description: Service currently unavailable
      security:
        - BearerAuth: []
        
  /charge/{charge-id}:
    patch:
      summary: refresh charge status
      description: Refresh charge status from the external PSP chosen by the customer, confirm the payment has been made in the PSP.
      tags:
        - payment
      parameters:
        - $ref: '#/components/parameters/ChargeId'
      responses:
        '200':
          description: status refreshed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChargeRefreshRespDto'
        '404':
          description: No such charge object
        '503':
          description: Service unavailable
      security:
        - BearerAuth: []
  
  /charge/{charge-id}/capture:
    patch:
      summary: sellers capture authorised payment
      description: |
          merchants / sellers capture the payment authorised by buyer, this service should support partial-amount capture for each associated merchant, and block any intention of repeat capture from a single merchant.
      tags:
        - payment
      parameters:
        - $ref: '#/components/parameters/ChargeId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CapturePayReqDto'
      responses:
        '200':
          description: captured successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CapturePayRespDto'
        '400':
          description: |
            inappropriate capture request (TODO: error code in response body)
        '403':
          description: |
            permission denied on currenct user
        '404':
          description: |
            charge not found
        '409':
          description: |
              incomplete charge, customer has not completed pay-in process yet
      security:
        - BearerAuth: []
  
  /refund/{order-id}/complete/{store-id}:
    patch:
      summary: complete a refund request
      description: |
          Merchant completes a refund request initiated by customer.
          TODO: let merchants define their own refund policy for each product
      tags:
        - refund
      parameters:
        - $ref: '#/components/parameters/OrderId'
        - $ref: '#/components/parameters/SellerId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefundCompletionReqDto'
      responses:
        '200':
          description: completed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RefundCompletionRespDto'
        '400':
          description: completion request exceeds limit of original refund request
        '403':
          description: invalid staff user ID for the merchant
        '404':
          description: missing charge
  
  /store/{store-id}/onboard:
    post:
      summary: onboard a new store
      description: |
        - onboard a new store (merchant / shop), so this payment service will be able to recognize it is the valid store during the payout workflow.
        - in this payment service, a merchant or a seller indicates a store / a shop started by an individual user or an organization that provides services / goods
      tags:
        - configuration
      parameters:
        - $ref: '#/components/parameters/SellerId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StoreOnboardReqDto'
      responses:
        '202':
          description: |
              onboarding request accepted, if the onboarding process requires sensitive data from the merchant such as card number or bank account, then this endpoint responds with URL , which is used for redirecting frontend to the form page hosted by 3rd-party processor, merchants can add the sensitive data directly in the form.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StoreOnboardRespDto'
  
  /store/{store-id}/onboard/status:
    patch:
      summary: refresh status of an onboarding store
      description: |
        Refresh status of an onboarding store, this endpoint works when onboarding request `POST /store/{store-id}/onboard` was accepted but not completed yet
      tags:
        - configuration
      parameters:
        - $ref: '#/components/parameters/SellerId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StoreOnboardStatusReqDto'
      responses:
        '200':
          description: status returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StoreOnboardRespDto'
  
  /store/{store-id}/order/charges:
    get:
      summary: fetch charges during given period for merchant
      description: |
          report summary of charges which completed pay-in flow, during given time period for a merchant
      tags:
        - reporting
      parameters:
        - $ref: '#/components/parameters/SellerId'
        - in: query
          name: start_after
          schema:
            type: string
            example: '2021-03-11-12'
        - in: query
          name: end_before
          schema:
            type: string
            example: '2021-03-11-18'
      responses:
        '200':
          description: charges summary returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReportChargeRespDto'


components:
  parameters:
    ChargeId:
      name: charge-id
      in: path
      description: |
            this parameter must be formed as user profile ID followed by datetime string `YYYYMMDD-HHMMSS`.
            
            Note the last 10 seconds will be truncated to 0, which means each customer allows to create only one new charge object per 10 seconds.
      required: true
      schema:
        type: string
        example: 188-20230930-115940
    
    SellerId:
      name: store-id
      in: path
      required: true
      schema:
        $ref: '#/components/schemas/SellerId'
    
    OrderId:
      name: order-id
      in: path
      required: true
      schema:
        type: string
        example: 9028a14935032175-20f40194
  
  schemas:
    SellerId:
      type: integer
      format: uint32
      example: 560
      
    ProductId:
      type: integer
      format: uint64
    
    Quantity:
      type: integer
      format: uint32
      example: 24
      
    PaymentCurrencyDto:
      type: string
      enum: [TWD, USD, THB, INR, IDR]
    
    OrderErrorReason:
      type: string
      enum: [InvalidOrder]
      
    PaymentMethodErrorReason:
      type: string
      enum: [InvalidUser, OperationRefuse]
    
    RangeLimitErrorDto:
      type: object
      properties:
        max_:
          type: integer
          format: int32
        min_:
          type: integer
          format: int32
        given:
          type: integer
          format: int32
      required:
        - max_
        - min_
        - given
      
    BaseProductIdCombo:
      type: object
      properties:
        product_id:
          $ref: '#/components/schemas/ProductId'
        seller_id:
          $ref: '#/components/schemas/SellerId'
    
    PayAmountDto:
      type: object
      properties:
        unit:
          type: integer
          format: uint32
          example: 9
        total:
          type: integer
          format: uint32
          description: in case the seller provides product-level discount or couple in the future.
          example: 44
      
    ChargeAmountOlineDto:
      allOf:
      - $ref: '#/components/schemas/BaseProductIdCombo'
      type: object
      properties:
        quantity:
          $ref: '#/components/schemas/Quantity'
        amount:
          $ref: '#/components/schemas/PayAmountDto'
      required:
        - product_id
        - seller_id
        - quantity
        - amount
        
    StripeCheckoutSessionReqDto:
      type: object
      properties:
        label:
          type: string
          enum: ['Stripe']
        customer_id:
          type: string
          example: 'customer-stripe-id'
        ui_mode:
          type: string
          enum: ['RedirectPage', 'EmbeddedJs']
        success_url:
          type: string
          example: 'https://myapp.project.org/success-page'
        cancel_url:
          type: string
          example: 'https://myapp.project.org/cancel-page'
      required:
        - label
        - customer_id
        - ui_mode
                  
    ChargeReqOrderDto:
      type: object
      properties:
        id:
          type: string
        lines:
          type: array
          items:
            $ref: '#/components/schemas/ChargeAmountOlineDto'
          minItems: 1
        currency:
          $ref: '#/components/schemas/PaymentCurrencyDto'

    ChargeReqDto:
      type: object
      description: TODO, add amounts for tax and discount
      properties:
        order:
          $ref: '#/components/schemas/ChargeReqOrderDto'
        method:
          oneOf:
            - $ref: '#/components/schemas/StripeCheckoutSessionReqDto'
    
    StripeCheckoutSessionRespDto:
      type: object
      description: note either of the fields  `redirect_url` or `client_session` is present , depend on the `ui_mode` specified in `StripeCheckoutSessionReqDto`
      properties:
        label:
          type: string
          enum: [Stripe]
        redirect_url:
          type: string
          example: 'xxx.stripe.com/final-payment-page/1234'
        client_session:
          type: string
          example: 'abcd1234'
      required:
        - label
    
    ChargeCreateRespDto:
      type: object
      properties:
        id:
          type: string
          description: ID to specific order payment / charge activity
          example: '71e4010024d6'
        method:
          description: TODO, add other payment methods e.g. Wise, Adyen
          oneOf:
            - $ref: '#/components/schemas/StripeCheckoutSessionRespDto'
        create_time:
          type: string
          format: date-time
      required:
        - method
        - create_time
    
    ChargeOlineErrorDto:
      description: At least one of the fields `quantity`,`amount`, and `expired` has to be present
      allOf:
      - $ref: '#/components/schemas/BaseProductIdCombo'
      type: object
      properties:
        quantity:
          $ref: '#/components/schemas/RangeLimitErrorDto'
        amount:
          $ref: '#/components/schemas/PayAmountDto'
        expired:
          type: boolean
      required:
        - seller_id
        - product_id
    
    ChargeRespErrorDto:
      type: object
      properties:
        order_id:
          $ref: '#/components/schemas/OrderErrorReason'
        method:
          $ref: '#/components/schemas/PaymentMethodErrorReason'
        lines:
          type: array
          items:
            $ref: '#/components/schemas/ChargeOlineErrorDto'
        num_charges_exceed:
            $ref: '#/components/schemas/RangeLimitErrorDto'
    
    ChargeRefreshRespDto:
      type: object
      properties:
        status:
          type: string
          enum: [Initialized, PspRefused, PspProcessing, PspTimedOut, InternalSyncing, SessionExpired, UnknownPsp, Completed]
        order_id:
          type: string
          description: order ID associated with the charge operation
          example: '2099381e101b1'
        create_time:
          type: string
          format: date-time
    
    CapturePayReqDto:
      type: object
      properties:
        store_id:
          $ref: '#/components/schemas/SellerId'

    CapturePay3partyRespDto:
      type: object
      properties:
        label:
          type: string
          enum: [Stripe]
        amount:
          type: string
          pattern: ^\d+(\.\d{1,2})?$
          example: "10.37"
        currency:
          $ref: '#/components/schemas/PaymentCurrencyDto'

    CapturePayRespDto:
      type: object
      properties:
        store_id:
          $ref: '#/components/schemas/SellerId'
        amount:
          type: string
          pattern: ^\d+(\.\d{1,2})?$
          example: "10.37"
        currency:
          $ref: '#/components/schemas/PaymentCurrencyDto'
        processor:
          $ref: '#/components/schemas/CapturePay3partyRespDto'

    StoreOnboardStripeReqDto:
      type: object
      properties:
        processor:
          type: string
          enum: [Stripe]
        return_url:
          type: string
          example: 'https://www.codility.com'
        refresh_url:
          type: string
          example: 'https://codeforces.com'
      required:
      - processor

    StoreOnboardReqDto:
      description: |
          Ideally I should use `discriminator.mapping`, unfortunately I cannot see expected output in swagger editor, after reading this github issue https://github.com/stoplightio/prism/issues/2345, it seems that the feature `discriminator` is no longer supported in future open API spec. Current workaround simply includes 2 different schema components and this type switches between them based on the value in field `processor`
      oneOf:
        - $ref: '#/components/schemas/StoreOnboardStripeReqDto'

    StoreOnboardStripeRespDto:
      type: object
      properties:
        processor:
          type: string
          enum: [Stripe]
        fields_required:
          type: array
          description: fields required in the Stripe-hosted onboarding form
          items:
            type: string
        disabled_reason:
          type: string
          description: when this optional field is not present, it indicates the stripe account is ready for work
        url:
          description: URL for merchant to fill Stripe-hosted form with sensitive data like card number
          type: string
          example: 'https://www.stripe.com/account-link/123456'
      required:
      - processor

    StoreOnboardRespDto:
      oneOf:
        - $ref: '#/components/schemas/StoreOnboardStripeRespDto'
    
    StoreOnboardStatusReqDto:
      type: object
      properties:
        processor:
          type: string
          enum: [Stripe]

    RefundLineRejectDto:
      type: object
      properties:
        Fraudulent:
          type: integer
          format: uint32
        Damaged:
          type: integer
          format: uint32

    RefundLineApprovalDto:
      type: object
      properties:
        quantity:
          $ref: '#/components/schemas/Quantity'
        amount_total:
          type: string
          example: '62.455'
      required:
        - quantity
        - amount_total

    RefundCompletionOlineReqDto:
      type: object
      properties:
        product_id:
          $ref: '#/components/schemas/ProductId'
        time_issued:
          type: string
          format: date-time
        reject:
          $ref: '#/components/schemas/RefundLineRejectDto'
        approval:
          $ref: '#/components/schemas/RefundLineApprovalDto'
      required:
      - product_id
      - time_issued
      - reject
      - approval
        
    RefundCompletionReqDto:
      type: object
      properties:
        req_time:
          type: string
          format: date-time
        lines:
          type: array
          items:
            $ref: '#/components/schemas/RefundCompletionOlineReqDto'
      required:
      - lines
      - req_time

    RefundCompletionOlineRespDto:
      $ref: '#/components/schemas/RefundCompletionOlineReqDto'

    RefundCompletionRespDto:
      type: object
      properties:
        lines:
          type: array
          items:
            $ref: '#/components/schemas/RefundCompletionOlineRespDto'
      required:
      - lines
      - req_time

    ReportTimeRangeDto:
      type: object
      properties:
        start_after:
          type: string
          format: date-time
        end_before:
          type: string
          format: date-time

    ReportChargeLineRespDto:
      type: object
      properties:
        product_id:
          $ref: '#/components/schemas/ProductId'
        currency:
          $ref: '#/components/schemas/PaymentCurrencyDto'
        amount:
          type: string
          example: '120.35'
        qty:
          $ref: '#/components/schemas/Quantity'

    ReportChargeRespDto:
      type: object
      properties:
        merchant_id:
          $ref: '#/components/schemas/SellerId'
        time_range:
          $ref: '#/components/schemas/ReportTimeRangeDto'
        lines:
          type: array
          items:
            $ref: '#/components/schemas/ReportChargeLineRespDto'

  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
